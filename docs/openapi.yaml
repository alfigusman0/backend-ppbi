openapi: 3.0.3
info:
  title: API PPBI - Persatuan Penggemar Bonsai Indonesia
  version: 1.19.0
  description: |
    API untuk sistem Persatuan Penggemar Bonsai Indonesia (PPBI)
    Menyediakan layanan autentikasi, manajemen pengguna, event, dan berbagai fitur terkait bonsai.
  contact:
    name: PPBI Support
  x-changelog:
    version: '1.19.0'
    date: '2025-01-23'
    changes:
      - 'ADDED: Modul Suiseki dengan CRUD operations lengkap'
      - 'ADDED: Validasi lengkap untuk data suiseki (nama, jenis, kelas, status)'
      - 'ADDED: Filtering untuk data suiseki dengan multiple criteria'
      - 'ADDED: Role-based access control untuk operasi suiseki'
    previous_versions:
      - version: '1.18.0'
        date: '2025-01-23'
        changes:
          - 'ADDED: Modul Pohon dengan CRUD operations lengkap'
          - 'ADDED: Validasi lengkap untuk data pohon (nama, jenis, kelas, status)'
          - 'ADDED: Filtering untuk data pohon dengan multiple criteria'
          - 'ADDED: Role-based access control untuk operasi pohon'
      - version: '1.17.0'
        date: '2025-01-23'
        changes:
          - 'ADDED: Modul KTA (Kartu Tanda Anggota) dengan CRUD operations lengkap'
          - 'ADDED: Validasi lengkap untuk data KTA (no_kta, id_anggota, status)'
          - 'ADDED: Filtering dan pagination untuk data KTA'
          - 'ADDED: Role-based access control untuk operasi KTA'
      - version: '1.16.0'
        date: '2025-01-23'
        changes:
          - 'ADDED: Modul AWS S3 file upload dengan support multiple file types'
          - 'ADDED: Endpoint upload file dengan validasi type dan size'
          - 'ADDED: Endpoint delete file dari S3 bucket'
          - 'ADDED: Support untuk upload image, document, dan file umum'
          - 'ADDED: Security validation untuk operasi file upload'
          - 'ENHANCED: Error handling untuk operasi S3'
      - version: '1.15.0'
        date: '2025-01-23'
        changes:
          - 'ADDED: Modul Settings Kelas dengan CRUD operations lengkap'
          - 'ADDED: Validasi lengkap untuk data kelas (nama kelas, status)'
          - 'ADDED: Redis caching untuk data kelas dengan berbagai filter'
          - 'ADDED: Role-based access control untuk operasi kelas'
          - 'ENHANCED: Pagination dan filtering untuk data master kelas'

servers:
  - url: http://localhost:5000
    description: Lokal Development Server
    variables:
      port:
        default: '5000'
  - url: https://apps.ppbindonesia.com
    description: Development Server
    x-environment: development
  - url: https://apps.ppbindonesia.org
    description: Production Server
    x-environment: production

tags:
  - name: Documentation
    description: Endpoint dokumentasi API
  - name: Authentication
    description: Operasi terkait autentikasi dan autorisasi
  - name: AWS S3 / MinIO
    description: Manajemen file dengan AWS S3/MinIO
  - name: Users
    description: Manajemen data pengguna
  - name: Profile
    description: Manajemen profil pengguna
  - name: KTA
    description: Manajemen Kartu Tanda Anggota (KTA) PPBI
  - name: Pohon
    description: Manajemen data pohon bonsai
  - name: Suiseki
    description: Manajemen data suiseki
  - name: Settings - Provinsi
    description: Manajemen data master provinsi
  - name: Settings - Kabupaten/Kota
    description: Manajemen data master kabupaten/kota
  - name: Settings - Kecamatan
    description: Manajemen data master kecamatan
  - name: Settings - Kelurahan
    description: Manajemen data master kelurahan
  - name: Settings - Level
    description: Manajemen data master level
  - name: Settings - Grup
    description: Manajemen data master grup
  - name: Settings - Modul
    description: Manajemen data master modul
  - name: Settings - Hak Akses
    description: Manajemen data master hak akses
  - name: Settings - Cabang PPBI
    description: Manajemen data master cabang PPBI
  - name: Settings - Profile Cabang PPBI
    description: Manajemen data profile cabang PPBI
  - name: Settings - Jenis Bonsai
    description: Manajemen data master jenis bonsai
  - name: Settings - Kelas
    description: Manajemen data master kelas bonsai

paths:
  /:
    get:
      summary: Root endpoint - Informasi API
      description: Menampilkan informasi dasar API dan dokumentasi
      tags:
        - Documentation
      responses:
        '200':
          description: Informasi API berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIInfo'
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /docs:
    get:
      summary: Dokumentasi API - Swagger UI
      description: Menampilkan dokumentasi API interaktif
      tags:
        - Documentation
      responses:
        '200':
          description: Dokumentasi berhasil ditampilkan
          content:
            text/html:
              schema:
                type: string
        '404':
          description: File dokumentasi tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api-spec:
    get:
      summary: OpenAPI Specification
      description: Mendapatkan file spesifikasi OpenAPI YAML
      tags:
        - Documentation
      responses:
        '200':
          description: Spesifikasi berhasil diambil
          content:
            application/yaml:
              schema:
                type: string
        '404':
          description: File spesifikasi tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /docs-health:
    get:
      summary: Health Check Dokumentasi
      description: Memeriksa status kesehatan file dokumentasi
      tags:
        - Documentation
      responses:
        '200':
          description: Dokumentasi sehat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocsHealth'
        '503':
          description: Dokumentasi tidak sehat
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api:
    get:
      summary: Health Check API
      description: Memeriksa status kesehatan API
      tags:
        - Documentation
      responses:
        '200':
          description: API sehat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIHealth'

  # ============================================
  # AUTHENTICATION ENDPOINTS
  # ============================================
  /api/auth/login:
    post:
      summary: Login pengguna
      description: Autentikasi pengguna dengan username dan password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validasi gagal atau kredensial salah
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/register:
    post:
      summary: Registrasi pengguna baru
      description: Mendaftarkan pengguna baru ke sistem
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registrasi berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Validasi gagal atau username sudah ada
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    get:
      summary: Logout pengguna
      description: Menghapus session dan token pengguna
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400':
          description: Tidak ada session aktif
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/check:
    get:
      summary: Cek status token
      description: Memeriksa apakah token masih aktif
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token masih aktif
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckTokenResponse'
        '401':
          description: Token tidak valid
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/google:
    get:
      summary: Login dengan Google OAuth2
      description: Redirect ke halaman autentikasi Google
      tags:
        - Authentication
      responses:
        '302':
          description: Redirect ke Google OAuth
          headers:
            Location:
              schema:
                type: string
                example: 'https://accounts.google.com/o/oauth2/auth?response_type=code...'

  /api/auth/google/callback:
    get:
      summary: Callback Google OAuth2
      description: Endpoint callback untuk autentikasi Google
      tags:
        - Authentication
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect ke frontend dengan token
          headers:
            Location:
              schema:
                type: string
                example: 'http://frontend.url/auth/google/token_jwt_string'
        '400':
          description: Gagal mendapatkan informasi user dari Google
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/token/create:
    post:
      summary: Buat token baru
      description: Membuat token JWT baru dengan payload custom
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
      responses:
        '200':
          description: Token berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Payload tidak valid
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/token:
    post:
      summary: Refresh token
      description: Memperbarui token dengan payload baru
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token berhasil di-refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Payload tidak valid atau tidak ada session
        '500':
          $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Hapus token
      description: Menghapus token dari sistem (logout paksa)
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTokenRequest'
      responses:
        '200':
          description: Token berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400':
          description: Tidak ada session aktif
        '404':
          description: Token tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # USERS MANAGEMENT ENDPOINTS
  # ============================================
  /api/users:
    get:
      summary: Get list of users
      description: Mendapatkan daftar pengguna dengan pagination, filtering, dan caching Redis
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id_user
          in: query
          schema:
            type: integer
          description: Filter by user ID
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by level IDs (comma separated)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Filter by group IDs (comma separated)
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name
        - name: keterangan
          in: query
          schema:
            type: string
          description: Filter by description
        - name: reset
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by reset status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at DESC'
          description: Order by field
      responses:
        '200':
          description: Daftar pengguna berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new user
      description: Membuat pengguna baru dengan validasi strong password
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Pengguna berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/users/single:
    get:
      summary: Get single user
      description: Mendapatkan data satu pengguna dengan caching Redis
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id_user
          in: query
          schema:
            type: integer
          description: User ID
        - name: username
          in: query
          schema:
            type: string
          description: Username
        - name: ids_level
          in: query
          schema:
            type: string
          description: Level IDs (comma separated)
        - name: level
          in: query
          schema:
            type: string
          description: Level name
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Group IDs (comma separated)
        - name: grup
          in: query
          schema:
            type: string
          description: Group name
        - name: keterangan
          in: query
          schema:
            type: string
          description: Description
        - name: reset
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Reset status
      responses:
        '200':
          description: Data pengguna berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/users/{id}:
    put:
      summary: Update user
      description: Mengupdate data pengguna dengan validasi role-based access
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Data pengguna berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user
      description: Menghapus pengguna dengan validasi role-based access
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: Pengguna berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # USERS IMPORT ENDPOINTS
  # ============================================
  /api/users/import/excel:
    post:
      summary: Import users from Excel
      description: Mengimpor data pengguna dari file Excel dengan validasi lengkap
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel file (.xlsx, .xls)
      responses:
        '200':
          description: Import berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResponse'
        '400':
          description: File tidak valid atau data duplikasi
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/users/import/preview:
    post:
      summary: Preview Excel before import
      description: Preview data Excel sebelum melakukan import dengan validasi struktur
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel file (.xlsx, .xls)
      responses:
        '200':
          description: Preview berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewResponse'
        '400':
          description: File tidak valid
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/users/import/download-template:
    get:
      summary: Download Excel template
      description: Mendownload template Excel untuk import pengguna dengan format yang benar
      tags:
        - Users
      responses:
        '200':
          description: Template berhasil didownload
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: 'attachment; filename=Template_Import_Users.xlsx'
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # PROFILE MANAGEMENT ENDPOINTS
  # ============================================
  /api/profile:
    get:
      summary: Get list of profiles
      description: Mendapatkan daftar profil dengan pagination, filtering, dan caching Redis
      tags:
        - Profile
      security:
        - bearerAuth: []
      parameters:
        - name: id_profile
          in: query
          schema:
            type: string
          description: Filter by profile IDs (comma separated)
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by level IDs (comma separated)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Filter by group IDs (comma separated)
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name
        - name: nama_lengkap
          in: query
          schema:
            type: string
          description: Filter by full name
        - name: jenis_kelamin
          in: query
          schema:
            type: string
            enum: ['LAKI-LAKI', 'PEREMPUAN']
          description: Filter by gender
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Filter by province IDs (comma separated)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Filter by province codes (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province name
        - name: pulau
          in: query
          schema:
            type: string
          description: Filter by island
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Filter by city IDs (comma separated)
        - name: kode_kabkota
          in: query
          schema:
            type: string
          description: Filter by city codes (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by city name
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district IDs (comma separated)
        - name: kode_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district codes (comma separated)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: Filter by district name
        - name: ids_kelurahan
          in: query
          schema:
            type: string
          description: Filter by village IDs (comma separated)
        - name: kode_kelurahan
          in: query
          schema:
            type: string
          description: Filter by village codes (comma separated)
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Filter by village name
        - name: nmr_tlpn
          in: query
          schema:
            type: string
          description: Filter by phone number
        - name: created_by
          in: query
          schema:
            type: integer
          description: Filter by creator ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at DESC'
          description: Order by field
      responses:
        '200':
          description: Daftar profil berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new profile
      description: Membuat profil baru dengan validasi lengkap
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
      responses:
        '200':
          description: Profil berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileResponse'
        '400':
          description: Validasi gagal
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/profile/single:
    get:
      summary: Get single profile
      description: Mendapatkan data satu profil dengan caching Redis
      tags:
        - Profile
      security:
        - bearerAuth: []
      parameters:
        - name: id_profile
          in: query
          schema:
            type: integer
          description: Profile ID
        - name: username
          in: query
          schema:
            type: string
          description: Username
        - name: ids_level
          in: query
          schema:
            type: string
          description: Level IDs (comma separated)
        - name: level
          in: query
          schema:
            type: string
          description: Level name
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Group IDs (comma separated)
        - name: grup
          in: query
          schema:
            type: string
          description: Group name
        - name: nama_lengkap
          in: query
          schema:
            type: string
          description: Full name
        - name: jenis_kelamin
          in: query
          schema:
            type: string
            enum: ['LAKI-LAKI', 'PEREMPUAN']
          description: Gender
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Province IDs (comma separated)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Province codes (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Province name
        - name: pulau
          in: query
          schema:
            type: string
          description: Island
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: City IDs (comma separated)
        - name: kode_kabkota
          in: query
          schema:
            type: string
          description: City codes (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: City name
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: District IDs (comma separated)
        - name: kode_kecamatan
          in: query
          schema:
            type: string
          description: District codes (comma separated)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: District name
        - name: ids_kelurahan
          in: query
          schema:
            type: string
          description: Village IDs (comma separated)
        - name: kode_kelurahan
          in: query
          schema:
            type: string
          description: Village codes (comma separated)
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Village name
        - name: nmr_tlpn
          in: query
          schema:
            type: string
          description: Phone number
        - name: created_by
          in: query
          schema:
            type: integer
          description: Creator ID
      responses:
        '200':
          description: Data profil berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/profile/{id}:
    put:
      summary: Update profile
      description: Mengupdate data profil dengan validasi role-based access
      tags:
        - Profile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Profile ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Data profil berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete profile
      description: Menghapus profil dengan validasi role-based access
      tags:
        - Profile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Profile ID
      responses:
        '200':
          description: Profil berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS PROVINSI ENDPOINTS
  # ============================================
  /api/settings/provinsi:
    get:
      summary: Get list of provinces
      description: Mendapatkan daftar provinsi dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Provinsi
      security:
        - bearerAuth: []
      parameters:
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Filter by province IDs (comma separated)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Filter by province codes (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province name
        - name: pulau
          in: query
          schema:
            type: string
            enum:
              [
                'PAPUA',
                'KALIMANTAN',
                'SUMATERA',
                'SULAWESI',
                'JAWA',
                'TIMOR',
                'HALMAHERA',
                'SERAM',
                'SUMBAWA',
                'FLORES',
              ]
          description: Filter by island
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar provinsi berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvinsiListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new province
      description: Membuat provinsi baru dengan validasi lengkap
      tags:
        - Settings - Provinsi
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProvinsiRequest'
      responses:
        '200':
          description: Provinsi berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProvinsiResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/provinsi/single:
    get:
      summary: Get single province
      description: Mendapatkan data satu provinsi dengan caching Redis
      tags:
        - Settings - Provinsi
      security:
        - bearerAuth: []
      parameters:
        - name: ids_provinsi
          in: query
          schema:
            type: integer
          description: Province ID
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Province code
        - name: provinsi
          in: query
          schema:
            type: string
          description: Province name
        - name: pulau
          in: query
          schema:
            type: string
            enum:
              [
                'PAPUA',
                'KALIMANTAN',
                'SUMATERA',
                'SULAWESI',
                'JAWA',
                'TIMOR',
                'HALMAHERA',
                'SERAM',
                'SUMBAWA',
                'FLORES',
              ]
          description: Island
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data provinsi berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvinsiResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/provinsi/{id}:
    put:
      summary: Update province
      description: Mengupdate data provinsi dengan validasi role-based access
      tags:
        - Settings - Provinsi
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Province ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProvinsiRequest'
      responses:
        '200':
          description: Data provinsi berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProvinsiResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete province
      description: Menghapus provinsi dengan validasi role-based access
      tags:
        - Settings - Provinsi
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Province ID
      responses:
        '200':
          description: Provinsi berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS KABUPATEN/KOTA ENDPOINTS
  # ============================================
  /api/settings/kab-kota:
    get:
      summary: Get list of regencies/cities
      description: Mendapatkan daftar kabupaten/kota dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Kabupaten/Kota
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city IDs (comma separated)
        - name: kode_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city codes (comma separated)
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Filter by province IDs (comma separated)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Filter by province codes (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province name
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar kabupaten/kota berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KabKotaListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new regency/city
      description: Membuat kabupaten/kota baru dengan validasi lengkap
      tags:
        - Settings - Kabupaten/Kota
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKabKotaRequest'
      responses:
        '200':
          description: Kabupaten/kota berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKabKotaResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/kab-kota/single:
    get:
      summary: Get single regency/city
      description: Mendapatkan data satu kabupaten/kota dengan caching Redis
      tags:
        - Settings - Kabupaten/Kota
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kabkota
          in: query
          schema:
            type: integer
          description: Regency/city ID
        - name: kode_kabkota
          in: query
          schema:
            type: string
          description: Regency/city code
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Province IDs (comma separated)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Province codes (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Province name
        - name: kabkota
          in: query
          schema:
            type: string
          description: Regency/city name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data kabupaten/kota berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KabKotaResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/kab-kota/{id}:
    put:
      summary: Update regency/city
      description: Mengupdate data kabupaten/kota dengan validasi role-based access
      tags:
        - Settings - Kabupaten/Kota
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Regency/city ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKabKotaRequest'
      responses:
        '200':
          description: Data kabupaten/kota berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateKabKotaResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete regency/city
      description: Menghapus kabupaten/kota dengan validasi role-based access
      tags:
        - Settings - Kabupaten/Kota
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Regency/city ID
      responses:
        '200':
          description: Kabupaten/kota berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS KECAMATAN ENDPOINTS
  # ============================================
  /api/settings/kecamatan:
    get:
      summary: Get list of districts
      description: Mendapatkan daftar kecamatan dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Kecamatan
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district IDs (comma separated)
        - name: kode_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district codes (comma separated)
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city IDs (comma separated)
        - name: kode_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city codes (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city name
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Filter by province IDs (comma separated)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Filter by province codes (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province name
        - name: kecamatan
          in: query
          schema:
            type: string
          description: Filter by district name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar kecamatan berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KecamatanListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new district
      description: Membuat kecamatan baru dengan validasi lengkap
      tags:
        - Settings - Kecamatan
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKecamatanRequest'
      responses:
        '200':
          description: Kecamatan berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKecamatanResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/kecamatan/single:
    get:
      summary: Get single district
      description: Mendapatkan data satu kecamatan dengan caching Redis
      tags:
        - Settings - Kecamatan
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kecamatan
          in: query
          schema:
            type: integer
          description: District ID
        - name: kode_kecamatan
          in: query
          schema:
            type: string
          description: District code
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Regency/city IDs (comma separated)
        - name: kode_kabkota
          in: query
          schema:
            type: string
          description: Regency/city codes (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Regency/city name
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Province IDs (comma separated)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Province codes (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Province name
        - name: kecamatan
          in: query
          schema:
            type: string
          description: District name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data kecamatan berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KecamatanResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/kecamatan/{id}:
    put:
      summary: Update district
      description: Mengupdate data kecamatan dengan validasi role-based access
      tags:
        - Settings - Kecamatan
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: District ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKecamatanRequest'
      responses:
        '200':
          description: Data kecamatan berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateKecamatanResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete district
      description: Menghapus kecamatan dengan validasi role-based access
      tags:
        - Settings - Kecamatan
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: District ID
      responses:
        '200':
          description: Kecamatan berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS KELURAHAN ENDPOINTS
  # ============================================
  /api/settings/kelurahan:
    get:
      summary: Get list of villages
      description: Mendapatkan daftar kelurahan dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Kelurahan
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kelurahan
          in: query
          schema:
            type: string
          description: Filter by village IDs (comma separated)
        - name: kode_kelurahan
          in: query
          schema:
            type: string
          description: Filter by village codes (comma separated)
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district IDs (comma separated)
        - name: kode_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district codes (comma separated)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: Filter by district name
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city IDs (comma separated)
        - name: kode_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city codes (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city name
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Filter by province IDs (comma separated)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Filter by province codes (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province name
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Filter by village name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar kelurahan berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KelurahanListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new village
      description: Membuat kelurahan baru dengan validasi lengkap
      tags:
        - Settings - Kelurahan
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKelurahanRequest'
      responses:
        '200':
          description: Kelurahan berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKelurahanResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/kelurahan/single:
    get:
      summary: Get single village
      description: Mendapatkan data satu kelurahan dengan caching Redis
      tags:
        - Settings - Kelurahan
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kelurahan
          in: query
          schema:
            type: integer
          description: Village ID
        - name: kode_kelurahan
          in: query
          schema:
            type: string
          description: Village code
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: District IDs (comma separated)
        - name: kode_kecamatan
          in: query
          schema:
            type: string
          description: District codes (comma separated)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: District name
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Regency/city IDs (comma separated)
        - name: kode_kabkota
          in: query
          schema:
            type: string
          description: Regency/city codes (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Regency/city name
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Province IDs (comma separated)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Province codes (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Province name
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Village name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data kelurahan berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KelurahanResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/kelurahan/{id}:
    put:
      summary: Update village
      description: Mengupdate data kelurahan dengan validasi role-based access
      tags:
        - Settings - Kelurahan
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Village ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKelurahanRequest'
      responses:
        '200':
          description: Data kelurahan berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateKelurahanResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete village
      description: Menghapus kelurahan dengan validasi role-based access
      tags:
        - Settings - Kelurahan
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Village ID
      responses:
        '200':
          description: Kelurahan berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS LEVEL ENDPOINTS
  # ============================================
  /api/settings/level:
    get:
      summary: Get list of user levels
      description: Mendapatkan daftar level pengguna dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Level
      security:
        - bearerAuth: []
      parameters:
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by level IDs (comma separated)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name
        - name: tingkat
          in: query
          schema:
            type: string
          description: Filter by level hierarchy (comma separated)
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar level berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LevelListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new user level
      description: Membuat level pengguna baru dengan validasi lengkap
      tags:
        - Settings - Level
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLevelRequest'
      responses:
        '200':
          description: Level berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLevelResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/level/single:
    get:
      summary: Get single user level
      description: Mendapatkan data satu level pengguna dengan caching Redis
      tags:
        - Settings - Level
      security:
        - bearerAuth: []
      parameters:
        - name: ids_level
          in: query
          schema:
            type: integer
          description: Level ID
        - name: level
          in: query
          schema:
            type: string
          description: Level name
        - name: tingkat
          in: query
          schema:
            type: string
          description: Level hierarchy (comma separated)
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data level berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LevelResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/level/{id}:
    put:
      summary: Update user level
      description: Mengupdate data level pengguna dengan validasi role-based access
      tags:
        - Settings - Level
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Level ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLevelRequest'
      responses:
        '200':
          description: Data level berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLevelResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user level
      description: Menghapus level pengguna dengan validasi role-based access
      tags:
        - Settings - Level
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Level ID
      responses:
        '200':
          description: Level berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS GRUP ENDPOINTS
  # ============================================
  /api/settings/grup:
    get:
      summary: Get list of user groups
      description: Mendapatkan daftar grup pengguna dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Grup
      security:
        - bearerAuth: []
      parameters:
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Filter by group IDs (comma separated)
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar grup berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrupListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new user group
      description: Membuat grup pengguna baru dengan validasi lengkap
      tags:
        - Settings - Grup
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGrupRequest'
      responses:
        '200':
          description: Grup berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGrupResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/grup/single:
    get:
      summary: Get single user group
      description: Mendapatkan data satu grup pengguna dengan caching Redis
      tags:
        - Settings - Grup
      security:
        - bearerAuth: []
      parameters:
        - name: ids_grup
          in: query
          schema:
            type: integer
          description: Group ID
        - name: grup
          in: query
          schema:
            type: string
          description: Group name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data grup berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrupResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/grup/{id}:
    put:
      summary: Update user group
      description: Mengupdate data grup pengguna dengan validasi role-based access
      tags:
        - Settings - Grup
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Group ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGrupRequest'
      responses:
        '200':
          description: Data grup berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateGrupResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user group
      description: Menghapus grup pengguna dengan validasi role-based access
      tags:
        - Settings - Grup
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Group ID
      responses:
        '200':
          description: Grup berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS MODUL ENDPOINTS
  # ============================================
  /api/settings/modul:
    get:
      summary: Get list of system modules
      description: Mendapatkan daftar modul sistem dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Modul
      security:
        - bearerAuth: []
      parameters:
        - name: ids_modul
          in: query
          schema:
            type: string
          description: Filter by module IDs (comma separated)
        - name: modul
          in: query
          schema:
            type: string
          description: Filter by module name
        - name: urutan
          in: query
          schema:
            type: string
          description: Filter by module order (comma separated)
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'urutan ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar modul berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModulListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new system module
      description: Membuat modul sistem baru dengan validasi lengkap
      tags:
        - Settings - Modul
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModulRequest'
      responses:
        '200':
          description: Modul berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModulResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/modul/single:
    get:
      summary: Get single system module
      description: Mendapatkan data satu modul sistem dengan caching Redis
      tags:
        - Settings - Modul
      security:
        - bearerAuth: []
      parameters:
        - name: ids_modul
          in: query
          schema:
            type: integer
          description: Module ID
        - name: modul
          in: query
          schema:
            type: string
          description: Module name
        - name: urutan
          in: query
          schema:
            type: string
          description: Module order (comma separated)
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data modul berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModulResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/modul/{id}:
    put:
      summary: Update system module
      description: Mengupdate data modul sistem dengan validasi role-based access
      tags:
        - Settings - Modul
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Module ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateModulRequest'
      responses:
        '200':
          description: Data modul berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateModulResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete system module
      description: Menghapus modul sistem dengan validasi role-based access
      tags:
        - Settings - Modul
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Module ID
      responses:
        '200':
          description: Modul berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS HAK AKSES ENDPOINTS
  # ============================================
  /api/settings/hak-akses:
    get:
      summary: Get list of access rights
      description: Mendapatkan daftar hak akses dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Hak Akses
      security:
        - bearerAuth: []
      parameters:
        - name: ids_hak_akses
          in: query
          schema:
            type: string
          description: Filter by access right IDs (comma separated)
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by level IDs (comma separated)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name
        - name: ids_modul
          in: query
          schema:
            type: string
          description: Filter by module IDs (comma separated)
        - name: modul
          in: query
          schema:
            type: string
          description: Filter by module name
        - name: permission
          in: query
          schema:
            type: string
          description: Filter by permission string
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar hak akses berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HakAksesListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new access right
      description: Membuat hak akses baru dengan validasi lengkap
      tags:
        - Settings - Hak Akses
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHakAksesRequest'
      responses:
        '200':
          description: Hak akses berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHakAksesResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/hak-akses/single:
    get:
      summary: Get single access right
      description: Mendapatkan data satu hak akses dengan caching Redis
      tags:
        - Settings - Hak Akses
      security:
        - bearerAuth: []
      parameters:
        - name: ids_hak_akses
          in: query
          schema:
            type: integer
          description: Access right ID
        - name: ids_level
          in: query
          schema:
            type: string
          description: Level IDs (comma separated)
        - name: level
          in: query
          schema:
            type: string
          description: Level name
        - name: ids_modul
          in: query
          schema:
            type: string
          description: Module IDs (comma separated)
        - name: modul
          in: query
          schema:
            type: string
          description: Module name
        - name: permission
          in: query
          schema:
            type: string
          description: Permission string
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data hak akses berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HakAksesResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/hak-akses/{id}:
    put:
      summary: Update access right
      description: Mengupdate data hak akses dengan validasi role-based access
      tags:
        - Settings - Hak Akses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Access right ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHakAksesRequest'
      responses:
        '200':
          description: Data hak akses berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateHakAksesResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete access right
      description: Menghapus hak akses dengan validasi role-based access
      tags:
        - Settings - Hak Akses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Access right ID
      responses:
        '200':
          description: Hak akses berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS CABANG ENDPOINTS
  # ============================================
  /api/settings/cabang:
    get:
      summary: Get list of branches
      description: Mendapatkan daftar cabang PPBI dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Cabang PPBI
      security:
        - bearerAuth: []
      parameters:
        - name: ids_cabang
          in: query
          schema:
            type: string
          description: Filter by branch IDs (comma separated)
        - name: kode_cabang
          in: query
          schema:
            type: string
          description: Filter by branch codes (comma separated)
        - name: cabang
          in: query
          schema:
            type: string
          description: Filter by branch name
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Filter by province IDs (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province name
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city IDs (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city name
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district IDs (comma separated)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: Filter by district name
        - name: ids_kelurahan
          in: query
          schema:
            type: string
          description: Filter by village IDs (comma separated)
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Filter by village name
        - name: alamat
          in: query
          schema:
            type: string
          description: Filter by address
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar cabang berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CabangListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new branch
      description: Membuat cabang PPBI baru dengan validasi lengkap
      tags:
        - Settings - Cabang PPBI
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCabangRequest'
      responses:
        '200':
          description: Cabang berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCabangResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/cabang/single:
    get:
      summary: Get single branch
      description: Mendapatkan data satu cabang PPBI dengan caching Redis
      tags:
        - Settings - Cabang PPBI
      security:
        - bearerAuth: []
      parameters:
        - name: ids_cabang
          in: query
          schema:
            type: integer
          description: Branch ID
        - name: kode_cabang
          in: query
          schema:
            type: string
          description: Branch code
        - name: cabang
          in: query
          schema:
            type: string
          description: Branch name
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Province IDs (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Province name
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Regency/city IDs (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Regency/city name
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: District IDs (comma separated)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: District name
        - name: ids_kelurahan
          in: query
          schema:
            type: string
          description: Village IDs (comma separated)
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Village name
        - name: alamat
          in: query
          schema:
            type: string
          description: Address
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data cabang berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CabangResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/cabang/{id}:
    put:
      summary: Update branch
      description: Mengupdate data cabang PPBI dengan validasi role-based access
      tags:
        - Settings - Cabang PPBI
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Branch ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCabangRequest'
      responses:
        '200':
          description: Data cabang berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCabangResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete branch
      description: Menghapus cabang PPBI dengan validasi role-based access
      tags:
        - Settings - Cabang PPBI
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Branch ID
      responses:
        '200':
          description: Cabang berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS PROFILE CABANG ENDPOINTS
  # ============================================
  /api/settings/profile-cabang:
    get:
      summary: Get list of branch profiles
      description: Mendapatkan daftar profile cabang PPBI dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Profile Cabang PPBI
      security:
        - bearerAuth: []
      parameters:
        - name: ids_profile_cabang
          in: query
          schema:
            type: string
          description: Filter by branch profile IDs (comma separated)
        - name: ids_cabang
          in: query
          schema:
            type: string
          description: Filter by branch IDs (comma separated)
        - name: kode_cabang
          in: query
          schema:
            type: string
          description: Filter by branch codes (comma separated)
        - name: cabang
          in: query
          schema:
            type: string
          description: Filter by branch name
        - name: nama
          in: query
          schema:
            type: string
          description: Filter by profile name
        - name: nmr_tlpn
          in: query
          schema:
            type: string
          description: Filter by phone number
        - name: email
          in: query
          schema:
            type: string
          description: Filter by email
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Filter by province IDs (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province name
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city IDs (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city name
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district IDs (comma separated)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: Filter by district name
        - name: ids_kelurahan
          in: query
          schema:
            type: string
          description: Filter by village IDs (comma separated)
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Filter by village name
        - name: alamat
          in: query
          schema:
            type: string
          description: Filter by address
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar profile cabang berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileCabangListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new branch profile
      description: Membuat profile cabang PPBI baru dengan validasi lengkap
      tags:
        - Settings - Profile Cabang PPBI
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileCabangRequest'
      responses:
        '200':
          description: Profile cabang berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileCabangResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/profile-cabang/single:
    get:
      summary: Get single branch profile
      description: Mendapatkan data satu profile cabang PPBI dengan caching Redis
      tags:
        - Settings - Profile Cabang PPBI
      security:
        - bearerAuth: []
      parameters:
        - name: ids_profile_cabang
          in: query
          schema:
            type: integer
          description: Branch profile ID
        - name: ids_cabang
          in: query
          schema:
            type: string
          description: Branch IDs (comma separated)
        - name: kode_cabang
          in: query
          schema:
            type: string
          description: Branch code
        - name: cabang
          in: query
          schema:
            type: string
          description: Branch name
        - name: nama
          in: query
          schema:
            type: string
          description: Profile name
        - name: nmr_tlpn
          in: query
          schema:
            type: string
          description: Phone number
        - name: email
          in: query
          schema:
            type: string
          description: Email
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Province IDs (comma separated)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Province name
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Regency/city IDs (comma separated)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Regency/city name
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: District IDs (comma separated)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: District name
        - name: ids_kelurahan
          in: query
          schema:
            type: string
          description: Village IDs (comma separated)
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Village name
        - name: alamat
          in: query
          schema:
            type: string
          description: Address
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data profile cabang berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileCabangResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/profile-cabang/{id}:
    put:
      summary: Update branch profile
      description: Mengupdate data profile cabang PPBI dengan validasi role-based access
      tags:
        - Settings - Profile Cabang PPBI
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Branch profile ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileCabangRequest'
      responses:
        '200':
          description: Data profile cabang berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileCabangResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete branch profile
      description: Menghapus profile cabang PPBI dengan validasi role-based access
      tags:
        - Settings - Profile Cabang PPBI
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Branch profile ID
      responses:
        '200':
          description: Profile cabang berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS JENIS BONSAI ENDPOINTS
  # ============================================
  /api/settings/jenis-bonsai:
    get:
      summary: Get list of bonsai types
      description: Mendapatkan daftar jenis bonsai dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Jenis Bonsai
      security:
        - bearerAuth: []
      parameters:
        - name: ids_jenis_bonsai
          in: query
          schema:
            type: string
          description: Filter by bonsai type IDs (comma separated)
        - name: jenis_bonsai
          in: query
          schema:
            type: string
          description: Filter by bonsai type name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar jenis bonsai berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JenisBonsaiListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new bonsai type
      description: Membuat jenis bonsai baru dengan validasi lengkap
      tags:
        - Settings - Jenis Bonsai
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJenisBonsaiRequest'
      responses:
        '200':
          description: Jenis bonsai berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJenisBonsaiResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/jenis-bonsai/single:
    get:
      summary: Get single bonsai type
      description: Mendapatkan data satu jenis bonsai dengan caching Redis
      tags:
        - Settings - Jenis Bonsai
      security:
        - bearerAuth: []
      parameters:
        - name: ids_jenis_bonsai
          in: query
          schema:
            type: integer
          description: Bonsai type ID
        - name: jenis_bonsai
          in: query
          schema:
            type: string
          description: Bonsai type name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data jenis bonsai berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JenisBonsaiResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/jenis-bonsai/{id}:
    put:
      summary: Update bonsai type
      description: Mengupdate data jenis bonsai dengan validasi role-based access
      tags:
        - Settings - Jenis Bonsai
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Bonsai type ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJenisBonsaiRequest'
      responses:
        '200':
          description: Data jenis bonsai berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateJenisBonsaiResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete bonsai type
      description: Menghapus jenis bonsai dengan validasi role-based access
      tags:
        - Settings - Jenis Bonsai
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Bonsai type ID
      responses:
        '200':
          description: Jenis bonsai berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SETTINGS KELAS ENDPOINTS
  # ============================================
  /api/settings/kelas:
    get:
      summary: Get list of classes
      description: Mendapatkan daftar kelas dengan pagination, filtering, dan caching Redis
      tags:
        - Settings - Kelas
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kelas
          in: query
          schema:
            type: string
          description: Filter by class IDs (comma separated)
        - name: kelas
          in: query
          schema:
            type: string
          description: Filter by class name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at ASC'
          description: Order by field
      responses:
        '200':
          description: Daftar kelas berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KelasListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new class
      description: Membuat kelas baru dengan validasi lengkap
      tags:
        - Settings - Kelas
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKelasRequest'
      responses:
        '200':
          description: Kelas berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKelasResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/kelas/single:
    get:
      summary: Get single class
      description: Mendapatkan data satu kelas dengan caching Redis
      tags:
        - Settings - Kelas
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kelas
          in: query
          schema:
            type: integer
          description: Class ID
        - name: kelas
          in: query
          schema:
            type: string
          description: Class name
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Status
      responses:
        '200':
          description: Data kelas berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KelasResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/settings/kelas/{id}:
    put:
      summary: Update class
      description: Mengupdate data kelas dengan validasi role-based access
      tags:
        - Settings - Kelas
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Class ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKelasRequest'
      responses:
        '200':
          description: Data kelas berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateKelasResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete class
      description: Menghapus kelas dengan validasi role-based access
      tags:
        - Settings - Kelas
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Class ID
      responses:
        '200':
          description: Kelas berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # AWS S3 FILE UPLOAD ENDPOINTS
  # ============================================
  /api/aws/upload:
    post:
      summary: Upload file to S3 bucket
      description: Mengupload file ke AWS S3 bucket dengan validasi type dan size file
      tags:
        - AWS S3 / MinIO
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File yang akan diupload
                type:
                  type: string
                  enum: ['image', 'document', 'file']
                  default: 'file'
                  description: Tipe file untuk validasi
      responses:
        '200':
          description: File berhasil diupload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwsUploadResponse'
        '400':
          description: Validasi gagal atau file tidak sesuai
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/aws/delete:
    delete:
      summary: Delete file from S3 bucket
      description: Menghapus file dari AWS S3 bucket
      tags:
        - AWS S3 / MinIO
      security:
        - bearerAuth: []
      parameters:
        - name: file_path
          in: query
          required: true
          schema:
            type: string
          description: Path file di S3 yang akan dihapus
      responses:
        '200':
          description: File berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: File path tidak valid
        '401':
          description: Akses ditolak
        '404':
          description: File tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # KTA (KARTU TANDA ANGGOTA) ENDPOINTS
  # ============================================
  /api/kta:
    get:
      summary: Get list of KTA
      description: Mendapatkan daftar Kartu Tanda Anggota dengan pagination dan filtering
      tags:
        - KTA
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kta
          in: query
          schema:
            type: string
          description: Filter by KTA IDs (comma separated)
        - name: no_kta
          in: query
          schema:
            type: string
          description: Filter by nomor KTA
        - name: id_anggota
          in: query
          schema:
            type: string
          description: Filter by ID anggota
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Daftar KTA berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KtaListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new KTA
      description: Membuat Kartu Tanda Anggota baru dengan validasi lengkap
      tags:
        - KTA
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKtaRequest'
      responses:
        '200':
          description: KTA berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateKtaResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/kta/single:
    get:
      summary: Get single KTA
      description: Mendapatkan data satu Kartu Tanda Anggota
      tags:
        - KTA
      security:
        - bearerAuth: []
      parameters:
        - name: ids_kta
          in: query
          required: true
          schema:
            type: integer
          description: KTA ID
      responses:
        '200':
          description: Data KTA berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KtaResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/kta/{id}:
    put:
      summary: Update KTA
      description: Mengupdate data Kartu Tanda Anggota
      tags:
        - KTA
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: KTA ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKtaRequest'
      responses:
        '200':
          description: Data KTA berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateKtaResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete KTA
      description: Menghapus Kartu Tanda Anggota
      tags:
        - KTA
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: KTA ID
      responses:
        '200':
          description: KTA berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # POHON BONSAI ENDPOINTS
  # ============================================
  /api/pohon:
    get:
      summary: Get list of trees
      description: Mendapatkan daftar pohon bonsai dengan pagination dan filtering
      tags:
        - Pohon
      security:
        - bearerAuth: []
      parameters:
        - name: ids_pohon
          in: query
          schema:
            type: string
          description: Filter by tree IDs (comma separated)
        - name: id_jenis_bonsai
          in: query
          schema:
            type: string
          description: Filter by jenis bonsai ID
        - name: id_kelas
          in: query
          schema:
            type: string
          description: Filter by kelas ID
        - name: id_anggota
          in: query
          schema:
            type: string
          description: Filter by anggota ID
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Daftar pohon berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PohonListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new tree
      description: Membuat data pohon bonsai baru dengan validasi lengkap
      tags:
        - Pohon
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePohonRequest'
      responses:
        '200':
          description: Pohon berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePohonResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/pohon/single:
    get:
      summary: Get single tree
      description: Mendapatkan data satu pohon bonsai
      tags:
        - Pohon
      security:
        - bearerAuth: []
      parameters:
        - name: ids_pohon
          in: query
          required: true
          schema:
            type: integer
          description: Tree ID
      responses:
        '200':
          description: Data pohon berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PohonResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/pohon/{id}:
    put:
      summary: Update tree
      description: Mengupdate data pohon bonsai
      tags:
        - Pohon
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Tree ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePohonRequest'
      responses:
        '200':
          description: Data pohon berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePohonResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete tree
      description: Menghapus data pohon bonsai
      tags:
        - Pohon
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Tree ID
      responses:
        '200':
          description: Pohon berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # SUISEKI ENDPOINTS
  # ============================================
  /api/suiseki:
    get:
      summary: Get list of suiseki
      description: Mendapatkan daftar suiseki dengan pagination dan filtering
      tags:
        - Suiseki
      security:
        - bearerAuth: []
      parameters:
        - name: ids_suiseki
          in: query
          schema:
            type: string
          description: Filter by suiseki IDs (comma separated)
        - name: id_jenis_suiseki
          in: query
          schema:
            type: string
          description: Filter by jenis suiseki ID
        - name: id_kelas
          in: query
          schema:
            type: string
          description: Filter by kelas ID
        - name: id_anggota
          in: query
          schema:
            type: string
          description: Filter by anggota ID
        - name: status
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Daftar suiseki berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuisekiListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new suiseki
      description: Membuat data suiseki baru dengan validasi lengkap
      tags:
        - Suiseki
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSuisekiRequest'
      responses:
        '200':
          description: Suiseki berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSuisekiResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/suiseki/single:
    get:
      summary: Get single suiseki
      description: Mendapatkan data satu suiseki
      tags:
        - Suiseki
      security:
        - bearerAuth: []
      parameters:
        - name: ids_suiseki
          in: query
          required: true
          schema:
            type: integer
          description: Suiseki ID
      responses:
        '200':
          description: Data suiseki berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuisekiResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/suiseki/{id}:
    put:
      summary: Update suiseki
      description: Mengupdate data suiseki
      tags:
        - Suiseki
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Suiseki ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSuisekiRequest'
      responses:
        '200':
          description: Data suiseki berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSuisekiResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete suiseki
      description: Menghapus data suiseki
      tags:
        - Suiseki
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Suiseki ID
      responses:
        '200':
          description: Suiseki berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Schema untuk responses umum
    APIInfo:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'API PPBI - Persatuan Penggemar Bonsai Indonesia'
        version:
          type: string
          example: '1.2.0'
        documentation:
          type: object
          properties:
            url:
              type: string
            description:
              type: string
        endpoints:
          type: object
          properties:
            docs:
              type: string
            api_spec:
              type: string
            health_check:
              type: string
            api_base:
              type: string

    APIHealth:
      type: object
      properties:
        status:
          type: string
          example: 'OK'
        message:
          type: string
          example: 'API PPBI is healthy'
        timestamp:
          type: string
          format: date-time
        documentation:
          type: string

    DocsHealth:
      type: object
      properties:
        status:
          type: string
          example: 'HEALTHY'
        timestamp:
          type: string
          format: date-time
        port:
          type: integer
          example: 5000
        documentation:
          type: object
          properties:
            swagger_html:
              type: object
              properties:
                status:
                  type: string
                size:
                  type: string
            openapi_yaml:
              type: object
              properties:
                status:
                  type: string
                size:
                  type: string
        access_urls:
          type: object
          properties:
            docs:
              type: string
            api_spec:
              type: string

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        status:
          type: string
        message:
          type: string
        path:
          type: string
        method:
          type: string

    # Schema untuk autentikasi
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 20
          pattern: '^[a-zA-Z0-9._]+$'
          example: 'user123'
        password:
          type: string
          minLength: 8
          example: 'Password123!'

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token untuk autentikasi

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - confirm_password
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 20
          pattern: '^[a-zA-Z0-9._]+$'
          example: 'newuser'
        password:
          type: string
          minLength: 8
          example: 'StrongPass123!'
        confirm_password:
          type: string
          example: 'StrongPass123!'
        reset:
          type: string
          enum: ['YA', 'TIDAK']
          default: 'TIDAK'

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        id_user:
          type: integer
          example: 123

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: 'You have successfully logged out!'

    CheckTokenResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Your token is still active'

    CreateTokenRequest:
      type: object
      required:
        - payload
      properties:
        payload:
          type: object
          description: Payload untuk JWT token

    RefreshTokenRequest:
      type: object
      required:
        - payload
      properties:
        payload:
          type: object
          description: Payload baru untuk JWT token

    DeleteTokenRequest:
      type: object
      properties:
        keterangan:
          type: string
          example: 'LOGOUT'

    TokenResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string

    # Schema untuk JWT payload
    JWTPayload:
      type: object
      properties:
        userTime:
          type: string
        app:
          type: string
        id_user:
          type: integer
        nama:
          type: string
        email:
          type: string
        username:
          type: string
        nmr_tlpn:
          type: string
        mandiri:
          type: string
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: string
        ids_grup:
          type: integer
        grup:
          type: string
        keterangan:
          type: string
        login_as:
          type: string
        id_admin:
          type: integer

    # Schema untuk users management
    UsersListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    UserResponse:
      type: object
      properties:
        id_user:
          type: integer
        username:
          type: string
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        ids_grup:
          type: integer
        grup:
          type: string
        keterangan:
          type: string
        reset:
          type: string
          enum: ['YA', 'TIDAK']
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserData:
      type: object
      properties:
        id_user:
          type: integer
        username:
          type: string
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        ids_grup:
          type: integer
        grup:
          type: string
        keterangan:
          type: string
        reset:
          type: string
          enum: ['YA', 'TIDAK']
        import:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required:
        - ids_grup
        - username
        - password
        - reset
      properties:
        ids_grup:
          type: integer
          example: 8
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9._]+$'
          example: 'user123'
        password:
          type: string
          minLength: 8
          example: 'Password123!'
        confirm_password:
          type: string
          example: 'Password123!'
        reset:
          type: string
          enum: ['YA', 'TIDAK']
          default: 'TIDAK'
        created_by:
          type: integer
          description: Untuk admin level tinggi

    CreateUserResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        id_user:
          type: integer
          example: 123

    UpdateUserRequest:
      type: object
      properties:
        ids_grup:
          type: integer
          example: 8
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9._]+$'
          example: 'updated_user'
        password:
          type: string
          minLength: 8
          example: 'NewPassword123!'
        confirm_password:
          type: string
          example: 'NewPassword123!'
        reset:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'TIDAK'

    ImportResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Import data berhasil'
        success:
          type: integer
          example: 10
        failed:
          type: integer
          example: 2
        details:
          type: object
          properties:
            success_rows:
              type: array
              items:
                type: integer
            failed_rows:
              type: array
              items:
                type: object
                properties:
                  row_number:
                    type: integer
                  error:
                    type: string

    PreviewResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Preview file Excel berhasil.'
        file_info:
          type: object
          properties:
            total_rows:
              type: integer
            valid_rows:
              type: integer
            invalid_rows:
              type: integer
            duplicate_rows:
              type: integer
            ready_to_import:
              type: boolean
        column_mapping:
          type: object
          properties:
            mapped:
              type: object
            optional_columns:
              type: object
        preview_data:
          type: array
          items:
            type: object
            properties:
              row_number:
                type: integer
              data:
                type: array
                items:
                  type: string
              is_header:
                type: boolean
              validation_message:
                type: string
        validation_summary:
          type: object
          properties:
            is_valid:
              type: boolean
            structure_valid:
              type: boolean
            no_duplicates:
              type: boolean
            has_valid_data:
              type: boolean
        errors:
          type: object
          properties:
            structure_errors:
              type: array
              items:
                type: string
            duplicate_errors:
              type: array
              items:
                type: string
            total_structure_errors:
              type: integer
            total_duplicate_errors:
              type: integer

    # Schema untuk profile management
    ProfileListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProfileData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    ProfileResponse:
      type: object
      properties:
        id_profile:
          type: integer
        id_user:
          type: integer
        username:
          type: string
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        ids_grup:
          type: integer
        grup:
          type: string
        nama_lengkap:
          type: string
        jenis_kelamin:
          type: string
          enum: ['LAKI-LAKI', 'PEREMPUAN']
        ids_kelurahan:
          type: integer
        kode_kelurahan:
          type: string
        kelurahan:
          type: string
        ids_kecamatan:
          type: integer
        kode_kecamatan:
          type: string
        kecamatan:
          type: string
        ids_kabkota:
          type: integer
        kode_kabkota:
          type: string
        kabkota:
          type: string
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        pulau:
          type: string
        rw:
          type: string
        rt:
          type: string
        alamat:
          type: string
        nmr_tlpn:
          type: string
        foto:
          type: string
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProfileData:
      type: object
      properties:
        id_profile:
          type: integer
        id_user:
          type: integer
        username:
          type: string
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        ids_grup:
          type: integer
        grup:
          type: string
        nama_lengkap:
          type: string
        jenis_kelamin:
          type: string
          enum: ['LAKI-LAKI', 'PEREMPUAN']
        ids_kelurahan:
          type: integer
        kode_kelurahan:
          type: string
        kelurahan:
          type: string
        ids_kecamatan:
          type: integer
        kode_kecamatan:
          type: string
        kecamatan:
          type: string
        ids_kabkota:
          type: integer
        kode_kabkota:
          type: string
        kabkota:
          type: string
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        pulau:
          type: string
        rw:
          type: string
        rt:
          type: string
        alamat:
          type: string
        nmr_tlpn:
          type: string
        foto:
          type: string
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateProfileRequest:
      type: object
      required:
        - nama_lengkap
        - jenis_kelamin
      properties:
        nama_lengkap:
          type: string
          minLength: 3
          maxLength: 255
          example: 'Budi Santoso'
        jenis_kelamin:
          type: string
          enum: ['LAKI-LAKI', 'PEREMPUAN']
          example: 'LAKI-LAKI'
        ids_kelurahan:
          type: integer
          example: 123
        rw:
          type: string
          minLength: 1
          maxLength: 5
          example: '02'
        rt:
          type: string
          minLength: 1
          maxLength: 5
          example: '03'
        alamat:
          type: string
          example: 'Jl. Merdeka No. 1, Kelurahan Contoh, Kecamatan Contoh'
        nmr_tlpn:
          type: string
          minLength: 10
          maxLength: 20
          example: '081234567890'
        foto:
          type: string
          example: 'https://example.com/foto.jpg'
        created_by:
          type: integer
          description: Untuk admin level tinggi

    CreateProfileResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        id_profile:
          type: integer
          example: 456

    UpdateProfileRequest:
      type: object
      properties:
        nama_lengkap:
          type: string
          minLength: 3
          maxLength: 255
          example: 'Budi Santoso Updated'
        jenis_kelamin:
          type: string
          enum: ['LAKI-LAKI', 'PEREMPUAN']
          example: 'LAKI-LAKI'
        ids_kelurahan:
          type: integer
          example: 123
        rw:
          type: string
          minLength: 1
          maxLength: 5
          example: '02'
        rt:
          type: string
          minLength: 1
          maxLength: 5
          example: '03'
        alamat:
          type: string
          example: 'Jl. Merdeka No. 1 Updated, Kelurahan Contoh, Kecamatan Contoh'
        nmr_tlpn:
          type: string
          minLength: 10
          maxLength: 20
          example: '081234567890'
        foto:
          type: string
          example: 'https://example.com/foto-updated.jpg'

    UpdateProfileResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        id_profile:
          type: integer
          example: 456

    # Schema untuk settings provinsi
    ProvinsiListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProvinsiData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    ProvinsiResponse:
      type: object
      properties:
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        pulau:
          type: string
          enum:
            [
              'PAPUA',
              'KALIMANTAN',
              'SUMATERA',
              'SULAWESI',
              'JAWA',
              'TIMOR',
              'HALMAHERA',
              'SERAM',
              'SUMBAWA',
              'FLORES',
            ]
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProvinsiData:
      type: object
      properties:
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        pulau:
          type: string
          enum:
            [
              'PAPUA',
              'KALIMANTAN',
              'SUMATERA',
              'SULAWESI',
              'JAWA',
              'TIMOR',
              'HALMAHERA',
              'SERAM',
              'SUMBAWA',
              'FLORES',
            ]
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateProvinsiRequest:
      type: object
      required:
        - kode_provinsi
        - provinsi
        - pulau
        - status
      properties:
        kode_provinsi:
          type: string
          minLength: 1
          maxLength: 5
          example: '31'
          description: Kode provinsi (max 5 karakter)
        provinsi:
          type: string
          example: 'DKI JAKARTA'
          description: Nama provinsi
        pulau:
          type: string
          enum:
            [
              'PAPUA',
              'KALIMANTAN',
              'SUMATERA',
              'SULAWESI',
              'JAWA',
              'TIMOR',
              'HALMAHERA',
              'SERAM',
              'SUMBAWA',
              'FLORES',
            ]
          example: 'JAWA'
          description: Pulau tempat provinsi berada
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateProvinsiResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_provinsi:
          type: integer
          example: 1

    UpdateProvinsiRequest:
      type: object
      properties:
        kode_provinsi:
          type: string
          minLength: 1
          maxLength: 5
          example: '31'
          description: Kode provinsi (max 5 karakter)
        provinsi:
          type: string
          example: 'DKI JAKARTA Updated'
          description: Nama provinsi
        pulau:
          type: string
          enum:
            [
              'PAPUA',
              'KALIMANTAN',
              'SUMATERA',
              'SULAWESI',
              'JAWA',
              'TIMOR',
              'HALMAHERA',
              'SERAM',
              'SUMBAWA',
              'FLORES',
            ]
          example: 'JAWA'
          description: Pulau tempat provinsi berada
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateProvinsiResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_provinsi:
          type: integer
          example: 1

    # Schema untuk settings kabupaten/kota
    KabKotaListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/KabKotaData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    KabKotaResponse:
      type: object
      properties:
        ids_kabkota:
          type: integer
        kode_kabkota:
          type: string
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        kabkota:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    KabKotaData:
      type: object
      properties:
        ids_kabkota:
          type: integer
        kode_kabkota:
          type: string
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        kabkota:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateKabKotaRequest:
      type: object
      required:
        - kode_kabkota
        - ids_provinsi
        - kabkota
        - status
      properties:
        kode_kabkota:
          type: string
          minLength: 1
          maxLength: 10
          example: '31.01'
          description: Kode kabupaten/kota (max 10 karakter)
        ids_provinsi:
          type: integer
          example: 1
          description: ID provinsi (foreign key)
        kabkota:
          type: string
          example: 'KABUPATEN ADM. KEPULAUAN SERIBU'
          description: Nama kabupaten/kota
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateKabKotaResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_kabkota:
          type: integer
          example: 1

    UpdateKabKotaRequest:
      type: object
      properties:
        kode_kabkota:
          type: string
          minLength: 1
          maxLength: 10
          example: '31.01'
          description: Kode kabupaten/kota (max 10 karakter)
        ids_provinsi:
          type: integer
          example: 1
          description: ID provinsi (foreign key)
        kabkota:
          type: string
          example: 'KABUPATEN ADM. KEPULAUAN SERIBU Updated'
          description: Nama kabupaten/kota
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateKabKotaResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_kabkota:
          type: integer
          example: 1

    # Schema untuk settings kecamatan
    KecamatanListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/KecamatanData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    KecamatanResponse:
      type: object
      properties:
        ids_kecamatan:
          type: integer
        kode_kecamatan:
          type: string
        ids_kabkota:
          type: integer
        kode_kabkota:
          type: string
        kabkota:
          type: string
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        kecamatan:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    KecamatanData:
      type: object
      properties:
        ids_kecamatan:
          type: integer
        kode_kecamatan:
          type: string
        ids_kabkota:
          type: integer
        kode_kabkota:
          type: string
        kabkota:
          type: string
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        kecamatan:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateKecamatanRequest:
      type: object
      required:
        - kode_kecamatan
        - ids_kabkota
        - kecamatan
        - status
      properties:
        kode_kecamatan:
          type: string
          minLength: 1
          maxLength: 10
          example: '31.01.01'
          description: Kode kecamatan (max 10 karakter)
        ids_kabkota:
          type: integer
          example: 1
          description: ID kabupaten/kota (foreign key)
        kecamatan:
          type: string
          example: 'KEPULAUAN SERIBU SELATAN'
          description: Nama kecamatan
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateKecamatanResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_kecamatan:
          type: integer
          example: 1

    UpdateKecamatanRequest:
      type: object
      properties:
        kode_kecamatan:
          type: string
          minLength: 1
          maxLength: 10
          example: '31.01.01'
          description: Kode kecamatan (max 10 karakter)
        ids_kabkota:
          type: integer
          example: 1
          description: ID kabupaten/kota (foreign key)
        kecamatan:
          type: string
          example: 'KEPULAUAN SERIBU SELATAN Updated'
          description: Nama kecamatan
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateKecamatanResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_kecamatan:
          type: integer
          example: 1

    # Schema untuk settings kelurahan
    KelurahanListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/KelurahanData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    KelurahanResponse:
      type: object
      properties:
        ids_kelurahan:
          type: integer
        kode_kelurahan:
          type: string
        ids_kecamatan:
          type: integer
        kode_kecamatan:
          type: string
        kecamatan:
          type: string
        ids_kabkota:
          type: integer
        kode_kabkota:
          type: string
        kabkota:
          type: string
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        kelurahan:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    KelurahanData:
      type: object
      properties:
        ids_kelurahan:
          type: integer
        kode_kelurahan:
          type: string
        ids_kecamatan:
          type: integer
        kode_kecamatan:
          type: string
        kecamatan:
          type: string
        ids_kabkota:
          type: integer
        kode_kabkota:
          type: string
        kabkota:
          type: string
        ids_provinsi:
          type: integer
        kode_provinsi:
          type: string
        provinsi:
          type: string
        kelurahan:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateKelurahanRequest:
      type: object
      required:
        - kode_kelurahan
        - ids_kecamatan
        - kelurahan
        - status
      properties:
        kode_kelurahan:
          type: string
          minLength: 1
          maxLength: 15
          example: '31.01.01.1001'
          description: Kode kelurahan (max 15 karakter)
        ids_kecamatan:
          type: integer
          example: 1
          description: ID kecamatan (foreign key)
        kelurahan:
          type: string
          example: 'PULAU TIDUNG'
          description: Nama kelurahan
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateKelurahanResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_kelurahan:
          type: integer
          example: 1

    UpdateKelurahanRequest:
      type: object
      properties:
        kode_kelurahan:
          type: string
          minLength: 1
          maxLength: 15
          example: '31.01.01.1001'
          description: Kode kelurahan (max 15 karakter)
        ids_kecamatan:
          type: integer
          example: 1
          description: ID kecamatan (foreign key)
        kelurahan:
          type: string
          example: 'PULAU TIDUNG Updated'
          description: Nama kelurahan
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateKelurahanResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_kelurahan:
          type: integer
          example: 1

    # Schema untuk settings level
    LevelListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LevelData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    LevelResponse:
      type: object
      properties:
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    LevelData:
      type: object
      properties:
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateLevelRequest:
      type: object
      required:
        - level
        - tingkat
        - status
      properties:
        level:
          type: string
          example: 'ADMINISTRATOR'
          description: Nama level pengguna
        tingkat:
          type: integer
          minimum: 1
          maximum: 10
          example: 1
          description: Tingkat hierarki level (1-10)
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateLevelResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_level:
          type: integer
          example: 1

    UpdateLevelRequest:
      type: object
      properties:
        level:
          type: string
          example: 'ADMINISTRATOR Updated'
          description: Nama level pengguna
        tingkat:
          type: integer
          minimum: 1
          maximum: 10
          example: 1
          description: Tingkat hierarki level (1-10)
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateLevelResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_level:
          type: integer
          example: 1

    # Schema untuk settings grup
    GrupListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GrupData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    GrupResponse:
      type: object
      properties:
        ids_grup:
          type: integer
        grup:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    GrupData:
      type: object
      properties:
        ids_grup:
          type: integer
        grup:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateGrupRequest:
      type: object
      required:
        - grup
        - status
      properties:
        grup:
          type: string
          example: 'ADMIN PPBI'
          description: Nama grup pengguna
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateGrupResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_grup:
          type: integer
          example: 1

    UpdateGrupRequest:
      type: object
      properties:
        grup:
          type: string
          example: 'ADMIN PPBI Updated'
          description: Nama grup pengguna
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateGrupResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_grup:
          type: integer
          example: 1

    # Schema untuk settings modul
    ModulListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ModulData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    ModulResponse:
      type: object
      properties:
        ids_modul:
          type: integer
        modul:
          type: string
        urutan:
          type: integer
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ModulData:
      type: object
      properties:
        ids_modul:
          type: integer
        modul:
          type: string
        urutan:
          type: integer
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateModulRequest:
      type: object
      required:
        - modul
        - urutan
        - status
      properties:
        modul:
          type: string
          example: 'Manajemen Pengguna'
          description: Nama modul sistem
        urutan:
          type: integer
          minimum: 1
          maximum: 999
          example: 1
          description: Urutan modul dalam sistem (1-999)
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateModulResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_modul:
          type: integer
          example: 1

    UpdateModulRequest:
      type: object
      properties:
        modul:
          type: string
          example: 'Manajemen Pengguna Updated'
          description: Nama modul sistem
        urutan:
          type: integer
          minimum: 1
          maximum: 999
          example: 2
          description: Urutan modul dalam sistem (1-999)
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateModulResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_modul:
          type: integer
          example: 1

    # Schema untuk settings hak akses
    HakAksesListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/HakAksesData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    HakAksesResponse:
      type: object
      properties:
        ids_hak_akses:
          type: integer
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        ids_modul:
          type: integer
        modul:
          type: string
        urutan:
          type: integer
        permission:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    HakAksesData:
      type: object
      properties:
        ids_hak_akses:
          type: integer
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        ids_modul:
          type: integer
        modul:
          type: string
        urutan:
          type: integer
        permission:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateHakAksesRequest:
      type: object
      required:
        - ids_level
        - ids_modul
        - permission
        - status
      properties:
        ids_level:
          type: integer
          example: 1
          description: ID level pengguna (foreign key)
        ids_modul:
          type: integer
          example: 1
          description: ID modul sistem (foreign key)
        permission:
          type: string
          minLength: 1
          maxLength: 5
          pattern: '^[CRUDS]*$'
          example: 'CRUDS'
          description: |
            String permission (max 5 karakter) yang berisi kombinasi dari:
            - C: Create
            - R: Read
            - U: Update
            - D: Delete
            - S: Special
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateHakAksesResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_hak_akses:
          type: integer
          example: 1

    UpdateHakAksesRequest:
      type: object
      properties:
        ids_level:
          type: integer
          example: 1
          description: ID level pengguna (foreign key)
        ids_modul:
          type: integer
          example: 1
          description: ID modul sistem (foreign key)
        permission:
          type: string
          minLength: 1
          maxLength: 5
          pattern: '^[CRUDS]*$'
          example: 'CRUDS'
          description: |
            String permission (max 5 karakter) yang berisi kombinasi dari:
            - C: Create
            - R: Read
            - U: Update
            - D: Delete
            - S: Special
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateHakAksesResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_hak_akses:
          type: integer
          example: 1

    # Schema untuk settings cabang
    CabangListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CabangData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    CabangResponse:
      type: object
      properties:
        ids_cabang:
          type: integer
        kode_cabang:
          type: string
        cabang:
          type: string
        ids_provinsi:
          type: integer
        provinsi:
          type: string
        ids_kabkota:
          type: integer
        kabkota:
          type: string
        ids_kecamatan:
          type: integer
        kecamatan:
          type: string
        ids_kelurahan:
          type: integer
        kelurahan:
          type: string
        alamat:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CabangData:
      type: object
      properties:
        ids_cabang:
          type: integer
        kode_cabang:
          type: string
        cabang:
          type: string
        ids_provinsi:
          type: integer
        provinsi:
          type: string
        ids_kabkota:
          type: integer
        kabkota:
          type: string
        ids_kecamatan:
          type: integer
        kecamatan:
          type: string
        ids_kelurahan:
          type: integer
        kelurahan:
          type: string
        alamat:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateCabangRequest:
      type: object
      required:
        - kode_cabang
        - cabang
        - ids_provinsi
        - ids_kabkota
        - ids_kecamatan
        - ids_kelurahan
        - alamat
        - status
      properties:
        kode_cabang:
          type: string
          minLength: 1
          maxLength: 10
          example: 'CBG-001'
          description: Kode cabang (max 10 karakter)
        cabang:
          type: string
          example: 'PPBI Cabang Jakarta Pusat'
          description: Nama cabang PPBI
        ids_provinsi:
          type: integer
          example: 1
          description: ID provinsi (foreign key)
        ids_kabkota:
          type: integer
          example: 1
          description: ID kabupaten/kota (foreign key)
        ids_kecamatan:
          type: integer
          example: 1
          description: ID kecamatan (foreign key)
        ids_kelurahan:
          type: integer
          example: 1
          description: ID kelurahan (foreign key)
        alamat:
          type: string
          example: 'Jl. Merdeka No. 1, Jakarta Pusat'
          description: Alamat lengkap cabang
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateCabangResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_cabang:
          type: integer
          example: 1

    UpdateCabangRequest:
      type: object
      properties:
        kode_cabang:
          type: string
          minLength: 1
          maxLength: 10
          example: 'CBG-001'
          description: Kode cabang (max 10 karakter)
        cabang:
          type: string
          example: 'PPBI Cabang Jakarta Pusat Updated'
          description: Nama cabang PPBI
        ids_provinsi:
          type: integer
          example: 1
          description: ID provinsi (foreign key)
        ids_kabkota:
          type: integer
          example: 1
          description: ID kabupaten/kota (foreign key)
        ids_kecamatan:
          type: integer
          example: 1
          description: ID kecamatan (foreign key)
        ids_kelurahan:
          type: integer
          example: 1
          description: ID kelurahan (foreign key)
        alamat:
          type: string
          example: 'Jl. Merdeka No. 1, Jakarta Pusat Updated'
          description: Alamat lengkap cabang
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateCabangResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_cabang:
          type: integer
          example: 1

    # Schema untuk settings profile cabang
    ProfileCabangListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProfileCabangData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    ProfileCabangResponse:
      type: object
      properties:
        ids_profile_cabang:
          type: integer
        ids_cabang:
          type: integer
        kode_cabang:
          type: string
        cabang:
          type: string
        nama:
          type: string
        nmr_tlpn:
          type: string
        email:
          type: string
        ids_provinsi:
          type: integer
        provinsi:
          type: string
        ids_kabkota:
          type: integer
        kabkota:
          type: string
        ids_kecamatan:
          type: integer
        kecamatan:
          type: string
        ids_kelurahan:
          type: integer
        kelurahan:
          type: string
        alamat:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProfileCabangData:
      type: object
      properties:
        ids_profile_cabang:
          type: integer
        ids_cabang:
          type: integer
        kode_cabang:
          type: string
        cabang:
          type: string
        nama:
          type: string
        nmr_tlpn:
          type: string
        email:
          type: string
        ids_provinsi:
          type: integer
        provinsi:
          type: string
        ids_kabkota:
          type: integer
        kabkota:
          type: string
        ids_kecamatan:
          type: integer
        kecamatan:
          type: string
        ids_kelurahan:
          type: integer
        kelurahan:
          type: string
        alamat:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateProfileCabangRequest:
      type: object
      required:
        - ids_cabang
        - nama
        - nmr_tlpn
        - email
        - ids_provinsi
        - ids_kabkota
        - ids_kecamatan
        - ids_kelurahan
        - alamat
        - status
      properties:
        ids_cabang:
          type: integer
          example: 1
          description: ID cabang (foreign key)
        nama:
          type: string
          example: 'Pengurus PPBI Cabang Jakarta Pusat'
          description: Nama profile cabang
        nmr_tlpn:
          type: string
          minLength: 10
          maxLength: 20
          example: '081234567890'
          description: Nomor telepon cabang
        email:
          type: string
          format: email
          example: 'jakarta.pusat@ppbi.org'
          description: Email cabang
        ids_provinsi:
          type: integer
          example: 1
          description: ID provinsi (foreign key)
        ids_kabkota:
          type: integer
          example: 1
          description: ID kabupaten/kota (foreign key)
        ids_kecamatan:
          type: integer
          example: 1
          description: ID kecamatan (foreign key)
        ids_kelurahan:
          type: integer
          example: 1
          description: ID kelurahan (foreign key)
        alamat:
          type: string
          example: 'Jl. Merdeka No. 1, Jakarta Pusat'
          description: Alamat lengkap cabang
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateProfileCabangResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_profile_cabang:
          type: integer
          example: 1

    UpdateProfileCabangRequest:
      type: object
      properties:
        ids_cabang:
          type: integer
          example: 1
          description: ID cabang (foreign key)
        nama:
          type: string
          example: 'Pengurus PPBI Cabang Jakarta Pusat Updated'
          description: Nama profile cabang
        nmr_tlpn:
          type: string
          minLength: 10
          maxLength: 20
          example: '081234567890'
          description: Nomor telepon cabang
        email:
          type: string
          format: email
          example: 'jakarta.pusat@ppbi.org'
          description: Email cabang
        ids_provinsi:
          type: integer
          example: 1
          description: ID provinsi (foreign key)
        ids_kabkota:
          type: integer
          example: 1
          description: ID kabupaten/kota (foreign key)
        ids_kecamatan:
          type: integer
          example: 1
          description: ID kecamatan (foreign key)
        ids_kelurahan:
          type: integer
          example: 1
          description: ID kelurahan (foreign key)
        alamat:
          type: string
          example: 'Jl. Merdeka No. 1, Jakarta Pusat Updated'
          description: Alamat lengkap cabang
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateProfileCabangResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_profile_cabang:
          type: integer
          example: 1

    # Schema untuk pagination
    Pagination:
      type: object
      properties:
        total:
          type: integer
        per_page:
          type: integer
        current_page:
          type: integer
        last_page:
          type: integer
        from:
          type: integer
        to:
          type: integer

    # Schema untuk settings jenis bonsai
    JenisBonsaiListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/JenisBonsaiData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    JenisBonsaiResponse:
      type: object
      properties:
        ids_jenis_bonsai:
          type: integer
        jenis_bonsai:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    JenisBonsaiData:
      type: object
      properties:
        ids_jenis_bonsai:
          type: integer
        jenis_bonsai:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateJenisBonsaiRequest:
      type: object
      required:
        - jenis_bonsai
        - status
      properties:
        jenis_bonsai:
          type: string
          example: 'Bonsai Beringin'
          description: Nama jenis bonsai
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateJenisBonsaiResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_jenis_bonsai:
          type: integer
          example: 1

    UpdateJenisBonsaiRequest:
      type: object
      properties:
        jenis_bonsai:
          type: string
          example: 'Bonsai Beringin Updated'
          description: Nama jenis bonsai
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateJenisBonsaiResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_jenis_bonsai:
          type: integer
          example: 1

    # Schema untuk settings kelas
    KelasListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/KelasData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    KelasResponse:
      type: object
      properties:
        ids_kelas:
          type: integer
        kelas:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    KelasData:
      type: object
      properties:
        ids_kelas:
          type: integer
        kelas:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateKelasRequest:
      type: object
      required:
        - kelas
        - status
      properties:
        kelas:
          type: string
          example: 'Kelas Pemula'
          description: Nama kelas
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    CreateKelasResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_kelas:
          type: integer
          example: 1

    UpdateKelasRequest:
      type: object
      properties:
        kelas:
          type: string
          example: 'Kelas Pemula Updated'
          description: Nama kelas
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'
          description: Status aktif/tidak aktif

    UpdateKelasResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_kelas:
          type: integer
          example: 1

    # Schema untuk AWS file upload
    AwsUploadResponse:
      type: object
      properties:
        message:
          type: string
          example: 'File uploaded successfully.'
        file_path:
          type: string
          example: 'uploads/images/2025/01/12345-image.jpg'
        file_url:
          type: string
          example: 'https://ppbi-bucket.s3.amazonaws.com/uploads/images/2025/01/12345-image.jpg'
        file_name:
          type: string
          example: 'image.jpg'
        file_size:
          type: integer
          example: 102400
        file_type:
          type: string
          example: 'image/jpeg'

    # Schema untuk KTA
    KtaListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/KtaData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    KtaResponse:
      type: object
      properties:
        ids_kta:
          type: integer
        no_kta:
          type: string
        id_anggota:
          type: integer
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    KtaData:
      type: object
      properties:
        ids_kta:
          type: integer
        no_kta:
          type: string
        id_anggota:
          type: integer
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateKtaRequest:
      type: object
      required:
        - no_kta
        - id_anggota
        - status
      properties:
        no_kta:
          type: string
          example: 'KTA-2025-001'
        id_anggota:
          type: integer
          example: 1
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'

    CreateKtaResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_kta:
          type: integer
          example: 1

    UpdateKtaRequest:
      type: object
      properties:
        no_kta:
          type: string
          example: 'KTA-2025-001-UPDATED'
        id_anggota:
          type: integer
          example: 1
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'

    UpdateKtaResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_kta:
          type: integer
          example: 1

    # Schema untuk Pohon
    PohonListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PohonData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    PohonResponse:
      type: object
      properties:
        ids_pohon:
          type: integer
        nama_pohon:
          type: string
        id_jenis_bonsai:
          type: integer
        id_kelas:
          type: integer
        id_anggota:
          type: integer
        deskripsi:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PohonData:
      type: object
      properties:
        ids_pohon:
          type: integer
        nama_pohon:
          type: string
        id_jenis_bonsai:
          type: integer
        id_kelas:
          type: integer
        id_anggota:
          type: integer
        deskripsi:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreatePohonRequest:
      type: object
      required:
        - nama_pohon
        - id_jenis_bonsai
        - id_kelas
        - id_anggota
        - status
      properties:
        nama_pohon:
          type: string
          example: 'Bonsai Beringin Seribu Akar'
        id_jenis_bonsai:
          type: integer
          example: 1
        id_kelas:
          type: integer
          example: 1
        id_anggota:
          type: integer
          example: 1
        deskripsi:
          type: string
          example: 'Bonsai beringin dengan akar yang indah'
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'

    CreatePohonResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_pohon:
          type: integer
          example: 1

    UpdatePohonRequest:
      type: object
      properties:
        nama_pohon:
          type: string
          example: 'Bonsai Beringin Seribu Akar Updated'
        id_jenis_bonsai:
          type: integer
          example: 1
        id_kelas:
          type: integer
          example: 1
        id_anggota:
          type: integer
          example: 1
        deskripsi:
          type: string
          example: 'Bonsai beringin dengan akar yang indah - updated'
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'

    UpdatePohonResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_pohon:
          type: integer
          example: 1

    # Schema untuk Suiseki
    SuisekiListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SuisekiData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    SuisekiResponse:
      type: object
      properties:
        ids_suiseki:
          type: integer
        nama_suiseki:
          type: string
        id_jenis_suiseki:
          type: integer
        id_kelas:
          type: integer
        id_anggota:
          type: integer
        deskripsi:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SuisekiData:
      type: object
      properties:
        ids_suiseki:
          type: integer
        nama_suiseki:
          type: string
        id_jenis_suiseki:
          type: integer
        id_kelas:
          type: integer
        id_anggota:
          type: integer
        deskripsi:
          type: string
        status:
          type: string
          enum: ['YA', 'TIDAK']
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateSuisekiRequest:
      type: object
      required:
        - nama_suiseki
        - id_jenis_suiseki
        - id_kelas
        - id_anggota
        - status
      properties:
        nama_suiseki:
          type: string
          example: 'Batu Gunung Merapi'
        id_jenis_suiseki:
          type: integer
          example: 1
        id_kelas:
          type: integer
          example: 1
        id_anggota:
          type: integer
          example: 1
        deskripsi:
          type: string
          example: 'Batu alam dari Gunung Merapi dengan bentuk yang unik'
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'

    CreateSuisekiResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        ids_suiseki:
          type: integer
          example: 1

    UpdateSuisekiRequest:
      type: object
      properties:
        nama_suiseki:
          type: string
          example: 'Batu Gunung Merapi Updated'
        id_jenis_suiseki:
          type: integer
          example: 1
        id_kelas:
          type: integer
          example: 1
        id_anggota:
          type: integer
          example: 1
        deskripsi:
          type: string
          example: 'Batu alam dari Gunung Merapi dengan bentuk yang unik - updated'
        status:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'YA'

    UpdateSuisekiResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'
        ids_suiseki:
          type: integer
          example: 1

    # Schema untuk success response
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'

    # Schema untuk request excel
    ExcelTemplateRequest:
      type: object
      properties:
        template_type:
          type: string
          enum: ['basic', 'advanced']
          default: 'basic'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    googleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            'https://www.googleapis.com/auth/userinfo.email': Akses email
            'https://www.googleapis.com/auth/userinfo.profile': Akses profile
            openid: OpenID Connect

security:
  - bearerAuth: []
