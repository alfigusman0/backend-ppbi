openapi: 3.0.3
info:
  title: API PPBI - Persatuan Penggemar Bonsai Indonesia
  version: 1.2.0
  description: |
    API untuk sistem Persatuan Penggemar Bonsai Indonesia (PPBI)
    Menyediakan layanan autentikasi, manajemen pengguna, event, dan berbagai fitur terkait bonsai.
  contact:
    name: PPBI Support
  x-changelog:
    version: '1.2.0'
    date: '2024-06-21'
    changes:
      - 'ADDED: Modul Users Management dengan CRUD operations lengkap'
      - 'ADDED: Fitur import users dari Excel dengan validasi'
      - 'ADDED: Endpoint preview Excel sebelum import'
      - 'ADDED: Download template Excel untuk import'
      - 'ADDED: Pagination dan filtering untuk list users'
      - 'ADDED: Redis caching untuk performance users data'
      - 'ENHANCED: Security dengan role-based access control'
    previous_versions:
      - version: '1.1.0'
        date: '2024-06-20'
        changes:
          - 'INITIAL: Dokumentasi API lengkap dengan OpenAPI 3.0.3'
          - 'ADDED: Authentication module dengan JWT dan OAuth2 Google'
          - 'ADDED: Basic API structure dan error handling'
          - 'ADDED: Documentation endpoints (Swagger UI, OpenAPI spec, health check)'

servers:
  - url: http://localhost:5000/api
    description: Lokal Development Server
    variables:
      port:
        default: '5000'
  - url: https://apps.ppbindonesia.com/api
    description: Development Server
    x-environment: development
  - url: https://apps.ppbindonesia.org/api
    description: Production Server
    x-environment: production

tags:
  - name: Authentication
    description: Operasi terkait autentikasi dan autorisasi
  - name: Users
    description: Manajemen data pengguna
  - name: Documentation
    description: Endpoint dokumentasi API

paths:
  /:
    get:
      summary: Root endpoint - Informasi API
      description: Menampilkan informasi dasar API dan dokumentasi
      responses:
        '200':
          description: Informasi API berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIInfo'
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /docs:
    get:
      summary: Dokumentasi API - Swagger UI
      description: Menampilkan dokumentasi API interaktif
      responses:
        '200':
          description: Dokumentasi berhasil ditampilkan
          content:
            text/html:
              schema:
                type: string
        '404':
          description: File dokumentasi tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api-spec:
    get:
      summary: OpenAPI Specification
      description: Mendapatkan file spesifikasi OpenAPI YAML
      responses:
        '200':
          description: Spesifikasi berhasil diambil
          content:
            application/yaml:
              schema:
                type: string
        '404':
          description: File spesifikasi tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /docs-health:
    get:
      summary: Health Check Dokumentasi
      description: Memeriksa status kesehatan file dokumentasi
      responses:
        '200':
          description: Dokumentasi sehat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocsHealth'
        '503':
          description: Dokumentasi tidak sehat
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # AUTHENTICATION ENDPOINTS
  # ============================================
  /api/auth/login:
    post:
      summary: Login pengguna
      description: Autentikasi pengguna dengan username dan password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validasi gagal atau kredensial salah
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/register:
    post:
      summary: Registrasi pengguna baru
      description: Mendaftarkan pengguna baru ke sistem
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registrasi berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Validasi gagal atau username sudah ada
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    get:
      summary: Logout pengguna
      description: Menghapus session dan token pengguna
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400':
          description: Tidak ada session aktif
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/check:
    get:
      summary: Cek status token
      description: Memeriksa apakah token masih aktif
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token masih aktif
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckTokenResponse'
        '401':
          description: Token tidak valid
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/google:
    get:
      summary: Login dengan Google OAuth2
      description: Redirect ke halaman autentikasi Google
      tags:
        - Authentication
      responses:
        '302':
          description: Redirect ke Google OAuth
          headers:
            Location:
              schema:
                type: string
                example: 'https://accounts.google.com/o/oauth2/auth?response_type=code...'

  /api/auth/google/callback:
    get:
      summary: Callback Google OAuth2
      description: Endpoint callback untuk autentikasi Google
      tags:
        - Authentication
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect ke frontend dengan token
          headers:
            Location:
              schema:
                type: string
                example: 'http://frontend.url/auth/google/token_jwt_string'
        '400':
          description: Gagal mendapatkan informasi user dari Google
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/token/create:
    post:
      summary: Buat token baru
      description: Membuat token JWT baru dengan payload custom
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
      responses:
        '200':
          description: Token berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Payload tidak valid
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/auth/token:
    post:
      summary: Refresh token
      description: Memperbarui token dengan payload baru
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token berhasil di-refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Payload tidak valid atau tidak ada session
        '500':
          $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Hapus token
      description: Menghapus token dari sistem (logout paksa)
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTokenRequest'
      responses:
        '200':
          description: Token berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400':
          description: Tidak ada session aktif
        '404':
          description: Token tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # USERS MANAGEMENT ENDPOINTS
  # ============================================
  /api/users:
    get:
      summary: Get list of users
      description: Mendapatkan daftar pengguna dengan pagination, filtering, dan caching Redis
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id_user
          in: query
          schema:
            type: integer
          description: Filter by user ID
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by level IDs (comma separated)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Filter by group IDs (comma separated)
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name
        - name: keterangan
          in: query
          schema:
            type: string
          description: Filter by description
        - name: reset
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Filter by reset status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: order_by
          in: query
          schema:
            type: string
            default: 'created_at DESC'
          description: Order by field
      responses:
        '200':
          description: Daftar pengguna berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new user
      description: Membuat pengguna baru dengan validasi strong password
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Pengguna berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Validasi gagal atau data sudah ada
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/users/single:
    get:
      summary: Get single user
      description: Mendapatkan data satu pengguna dengan caching Redis
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id_user
          in: query
          schema:
            type: integer
          description: User ID
        - name: username
          in: query
          schema:
            type: string
          description: Username
        - name: ids_level
          in: query
          schema:
            type: string
          description: Level IDs (comma separated)
        - name: level
          in: query
          schema:
            type: string
          description: Level name
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Group IDs (comma separated)
        - name: grup
          in: query
          schema:
            type: string
          description: Group name
        - name: keterangan
          in: query
          schema:
            type: string
          description: Description
        - name: reset
          in: query
          schema:
            type: string
            enum: ['YA', 'TIDAK']
          description: Reset status
      responses:
        '200':
          description: Data pengguna berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/users/{id}:
    put:
      summary: Update user
      description: Mengupdate data pengguna dengan validasi role-based access
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Data pengguna berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validasi gagal atau data tidak berubah
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user
      description: Menghapus pengguna dengan validasi role-based access
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: Pengguna berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Akses ditolak
        '404':
          description: Data tidak ditemukan
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  # ============================================
  # USERS IMPORT ENDPOINTS
  # ============================================
  /api/users/import/excel:
    post:
      summary: Import users from Excel
      description: Mengimpor data pengguna dari file Excel dengan validasi lengkap
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel file (.xlsx, .xls)
      responses:
        '200':
          description: Import berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResponse'
        '400':
          description: File tidak valid atau data duplikasi
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/users/import/preview:
    post:
      summary: Preview Excel before import
      description: Preview data Excel sebelum melakukan import dengan validasi struktur
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel file (.xlsx, .xls)
      responses:
        '200':
          description: Preview berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewResponse'
        '400':
          description: File tidak valid
        '401':
          description: Akses ditolak
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api/users/import/download-template:
    get:
      summary: Download Excel template
      description: Mendownload template Excel untuk import pengguna dengan format yang benar
      tags:
        - Users
      responses:
        '200':
          description: Template berhasil didownload
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: 'attachment; filename=Template_Import_Users.xlsx'
        '500':
          $ref: '#/components/schemas/ErrorResponse'

  /api:
    get:
      summary: Health Check API
      description: Memeriksa status kesehatan API
      responses:
        '200':
          description: API sehat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIHealth'

components:
  schemas:
    # Schema untuk responses umum
    APIInfo:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'API PPBI - Persatuan Penggemar Bonsai Indonesia'
        version:
          type: string
          example: '1.2.0'
        documentation:
          type: object
          properties:
            url:
              type: string
            description:
              type: string
        endpoints:
          type: object
          properties:
            docs:
              type: string
            api_spec:
              type: string
            health_check:
              type: string
            api_base:
              type: string

    APIHealth:
      type: object
      properties:
        status:
          type: string
          example: 'OK'
        message:
          type: string
          example: 'API PPBI is healthy'
        timestamp:
          type: string
          format: date-time
        documentation:
          type: string

    DocsHealth:
      type: object
      properties:
        status:
          type: string
          example: 'HEALTHY'
        timestamp:
          type: string
          format: date-time
        port:
          type: integer
          example: 5000
        documentation:
          type: object
          properties:
            swagger_html:
              type: object
              properties:
                status:
                  type: string
                size:
                  type: string
            openapi_yaml:
              type: object
              properties:
                status:
                  type: string
                size:
                  type: string
        access_urls:
          type: object
          properties:
            docs:
              type: string
            api_spec:
              type: string

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        status:
          type: string
        message:
          type: string
        path:
          type: string
        method:
          type: string

    # Schema untuk autentikasi
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 20
          pattern: '^[a-zA-Z0-9._]+$'
          example: 'user123'
        password:
          type: string
          minLength: 8
          example: 'Password123!'

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token untuk autentikasi

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - confirm_password
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 20
          pattern: '^[a-zA-Z0-9._]+$'
          example: 'newuser'
        password:
          type: string
          minLength: 8
          example: 'StrongPass123!'
        confirm_password:
          type: string
          example: 'StrongPass123!'
        reset:
          type: string
          enum: ['YA', 'TIDAK']
          default: 'TIDAK'

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        id_user:
          type: integer
          example: 123

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: 'You have successfully logged out!'

    CheckTokenResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Your token is still active'

    CreateTokenRequest:
      type: object
      required:
        - payload
      properties:
        payload:
          type: object
          description: Payload untuk JWT token

    RefreshTokenRequest:
      type: object
      required:
        - payload
      properties:
        payload:
          type: object
          description: Payload baru untuk JWT token

    DeleteTokenRequest:
      type: object
      properties:
        keterangan:
          type: string
          example: 'LOGOUT'

    TokenResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string

    # Schema untuk JWT payload
    JWTPayload:
      type: object
      properties:
        userTime:
          type: string
        app:
          type: string
        id_user:
          type: integer
        nama:
          type: string
        email:
          type: string
        username:
          type: string
        nmr_tlpn:
          type: string
        mandiri:
          type: string
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: string
        ids_grup:
          type: integer
        grup:
          type: string
        keterangan:
          type: string
        login_as:
          type: string
        id_admin:
          type: integer

    # Schema untuk users management
    UsersListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserData'
        pagination:
          $ref: '#/components/schemas/Pagination'

    UserResponse:
      type: object
      properties:
        id_user:
          type: integer
        username:
          type: string
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        ids_grup:
          type: integer
        grup:
          type: string
        keterangan:
          type: string
        reset:
          type: string
          enum: ['YA', 'TIDAK']
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserData:
      type: object
      properties:
        id_user:
          type: integer
        username:
          type: string
        ids_level:
          type: integer
        level:
          type: string
        tingkat:
          type: integer
        ids_grup:
          type: integer
        grup:
          type: string
        keterangan:
          type: string
        reset:
          type: string
          enum: ['YA', 'TIDAK']
        import:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required:
        - ids_grup
        - username
        - password
        - reset
      properties:
        ids_grup:
          type: integer
          example: 8
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9._]+$'
          example: 'user123'
        password:
          type: string
          minLength: 8
          example: 'Password123!'
        confirm_password:
          type: string
          example: 'Password123!'
        reset:
          type: string
          enum: ['YA', 'TIDAK']
          default: 'TIDAK'
        created_by:
          type: integer
          description: Untuk admin level tinggi

    CreateUserResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data added successfully.'
        id_user:
          type: integer
          example: 123

    UpdateUserRequest:
      type: object
      properties:
        ids_grup:
          type: integer
          example: 8
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9._]+$'
          example: 'updated_user'
        password:
          type: string
          minLength: 8
          example: 'NewPassword123!'
        confirm_password:
          type: string
          example: 'NewPassword123!'
        reset:
          type: string
          enum: ['YA', 'TIDAK']
          example: 'TIDAK'

    ImportResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Import data berhasil'
        success:
          type: integer
          example: 10
        failed:
          type: integer
          example: 2
        details:
          type: object
          properties:
            success_rows:
              type: array
              items:
                type: integer
            failed_rows:
              type: array
              items:
                type: object
                properties:
                  row_number:
                    type: integer
                  error:
                    type: string

    PreviewResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Preview file Excel berhasil.'
        file_info:
          type: object
          properties:
            total_rows:
              type: integer
            valid_rows:
              type: integer
            invalid_rows:
              type: integer
            duplicate_rows:
              type: integer
            ready_to_import:
              type: boolean
        column_mapping:
          type: object
          properties:
            mapped:
              type: object
            optional_columns:
              type: object
        preview_data:
          type: array
          items:
            type: object
            properties:
              row_number:
                type: integer
              data:
                type: array
                items:
                  type: string
              is_header:
                type: boolean
              validation_message:
                type: string
        validation_summary:
          type: object
          properties:
            is_valid:
              type: boolean
            structure_valid:
              type: boolean
            no_duplicates:
              type: boolean
            has_valid_data:
              type: boolean
        errors:
          type: object
          properties:
            structure_errors:
              type: array
              items:
                type: string
            duplicate_errors:
              type: array
              items:
                type: string
            total_structure_errors:
              type: integer
            total_duplicate_errors:
              type: integer

    Pagination:
      type: object
      properties:
        total:
          type: integer
        per_page:
          type: integer
        current_page:
          type: integer
        last_page:
          type: integer
        from:
          type: integer
        to:
          type: integer

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Data changed successfully.'

    ExcelTemplateRequest:
      type: object
      properties:
        template_type:
          type: string
          enum: ['basic', 'advanced']
          default: 'basic'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    googleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            'https://www.googleapis.com/auth/userinfo.email': Akses email
            'https://www.googleapis.com/auth/userinfo.profile': Akses profile
            openid: OpenID Connect

security:
  - bearerAuth: []
