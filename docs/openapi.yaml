openapi: 3.0.3
info:
  title: PPBI API - Persatuan Penggemar Bonsai Indonesia
  version: 1.4.2
  description: |
    Dokumentasi lengkap API Service untuk PPBI (Persatuan Penggemar Bonsai Indonesia).

    ## Fitur Utama
    - **Authentication**: Login, Register, Google OAuth, Token Management
    - **Users Management**: CRUD operations dengan Excel bulk import
    - **Profile Management**: Detailed user profiles dengan geographic hierarchy
    - **Cabang Management**: Branch office management dengan filtering
    - **Access Control**: Role-based access dengan permission checking
    - **Caching**: Redis caching untuk optimasi performa
    - **Excel Import**: Bulk data import dengan validation dan preview

    ## Architecture Features
    - **Security**: JWT Bearer Token, Role-based Access Control (RBAC)
    - **Performance**: Redis caching dengan configurable TTL, MD5 URL hashing
    - **Logging**: Winston logger dengan daily rotation
    - **Validation**: Field-level validation, duplicate checking, foreign key validation
    - **Error Handling**: Comprehensive error codes dan messages

  contact:
    name: API Support
    email: itdivision.ppbi@gmail.com
    url: https://ppbindonesia.org
  x-changelog:
    - version: 1.4.2
      date: 2025-10-29
      breaking_changes:
        - Restructured auth endpoints untuk token management
      additions:
        - Added createToken endpoint untuk custom token generation
        - Added refreshToken endpoint untuk token refresh
        - Added checkToken endpoint untuk token validation
        - Added deleteToken endpoint untuk token invalidation
        - Added /profile/single endpoint GET
        - Added /users/single endpoint GET
        - Added /settings/cabang/single endpoint GET
        - Complete Excel import system (importExcel, previewExcel, downloadTemplate)
        - Comprehensive query filters dengan geographic hierarchy support
      fixes:
        - Fixed logout method ke GET (sesuai source code)
        - Added detailed access control documentation
        - Added Redis caching explanation
      improvements:
        - Enhanced filtering dengan IN dan LIKE operators
        - Added created_by conditional logic documentation
        - Added response examples dari actual implementation
        - Added access level descriptions
    - version: 1.4.1
      date: 2025-10-29
      changes:
        - Fixed logout endpoint method dari POST menjadi GET
        - Merged dengan openapi.yaml versi 1.5.0 non-destructively
        - Maintained urutan dokumentasi struktur yang konsisten
        - Added /users/single endpoint (GET)
        - Verified semua routes dari server.js routing
        - Standardized HTTP methods sesuai actual implementation
    - version: 1.4.0
      date: 2025-10-29
      changes:
        - Added complete Cabang PPBI Management CRUD endpoints
        - Added cabang read with advanced filtering, geographic support, sorting, and pagination
        - Added cabang single retrieval with multiple filter options
        - Added cabang status management (YA/TIDAK untuk active/inactive)
        - Redis caching for cabang operations
        - Non-destructive merge with profile.js (1.3.0)
        - Access control based on user level and module permissions (module ID 4)
        - Geographic hierarchy support (provinsi, kabkota, kecamatan, kelurahan)
    - version: 1.3.0
      date: 2025-10-29
      changes:
        - Added complete Profile Management CRUD endpoints
        - Added profile geographic data support
    - version: 1.2.0
      date: 2025-10-29
      changes:
        - Added complete Users CRUD endpoints
        - Added Excel import functionality
    - version: 1.1.0
      date: 2025-10-29
      changes:
        - Added Google OAuth authentication
        - Added token management endpoints

servers:
  - url: http://localhost:5000/api
    description: Lokal Development Server
    variables:
      port:
        default: '5000'
  - url: https://apps.ppbindonesia.com/api
    description: Development Server
    x-environment: development
  - url: https://apps.ppbindonesia.org/api
    description: Production Server
    x-environment: production

tags:
  - name: Authentication
    description: Endpoints untuk autentikasi pengguna
  - name: Token Management
    description: Endpoints untuk manajemen token JWT
  - name: OAuth
    description: Endpoints untuk autentikasi OAuth (Google)
  - name: Users
    description: Endpoints untuk manajemen data pengguna (CRUD)
  - name: Users Import
    description: Endpoints untuk import bulk users dari Excel
  - name: Profile
    description: Endpoints untuk manajemen profil user yang detail
  - name: Cabang PPBI
    description: Endpoints untuk manajemen cabang ppbi di berbagai lokasi

paths:
  # ===========================
  # AUTHENTICATION ENDPOINTS
  # ===========================

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register pengguna baru
      description: |
        Membuat akun pengguna baru dengan validasi username dan password yang kuat.
        User baru akan mendapat ids_grup = 8 (default user group).
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              success:
                summary: Register berhasil
                value:
                  username: john_doe
                  password: SecurePass@123
      responses:
        '200':
          description: User berhasil didaftarkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login pengguna
      description: |
        Melakukan autentikasi pengguna dan mengembalikan JWT token.
        Password di-hash menggunakan bcrypt dan divalidasi saat login.
        User login dengan level >= 5 akan memasuki mode "LOGIN AS" (login dengan privilege lebih rendah).
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    get:
      tags:
        - Authentication
      summary: Logout pengguna
      description: |
        Melakukan logout pengguna dan invalidasi JWT token.
        Token akan ditandai sebagai expired di database/Redis.
        Method: GET (tidak POST)
      operationId: logoutUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: 'You have successfully logged out!'
        '400':
          description: User belum login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ===========================
  # TOKEN MANAGEMENT ENDPOINTS
  # ===========================

  /auth/create-token:
    post:
      tags:
        - Token Management
      summary: Buat JWT token custom
      description: |
        Membuat JWT token baru dengan payload custom.
        Token akan disimpan di database/Redis dan dapat digunakan untuk API calls.
      operationId: createToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - payload
              properties:
                payload:
                  type: object
                  description: Custom payload untuk JWT token
                  example:
                    id_user: 1
                    username: john_doe
                    ids_level: 2
      responses:
        '200':
          description: Token berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh-token:
    post:
      tags:
        - Token Management
      summary: Refresh JWT token
      description: |
        Membuat token baru dengan payload yang di-update.
        Token lama akan tetap aktif sampai expiration time-nya.
      operationId: refreshToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - payload
              properties:
                payload:
                  type: object
                  description: Updated payload untuk JWT token baru
      responses:
        '200':
          description: Token berhasil di-refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/check-token:
    get:
      tags:
        - Token Management
      summary: Validasi JWT token
      description: |
        Mengecek apakah JWT token masih aktif dan valid.
        Endpoint ini akan mengembalikan 200 jika token valid.
      operationId: checkToken
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token masih aktif
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Your token is still active'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/delete-token:
    post:
      tags:
        - Token Management
      summary: Hapus/invalidasi JWT token
      description: |
        Menghapus token dari sistem (database/Redis).
        Token akan tidak bisa digunakan lagi untuk API calls.
      operationId: deleteToken
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                keterangan:
                  type: string
                  default: LOGOUT
                  description: Alasan penghapusan token
      responses:
        '200':
          description: Token berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Token tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ===========================
  # OAUTH ENDPOINTS
  # ===========================

  /auth/google:
    get:
      tags:
        - OAuth
      summary: Redirect ke Google OAuth
      description: |
        Mengarahkan user ke halaman login Google.
        Google akan melakukan redirect kembali ke `/auth/google/callback` dengan authorization code.
      operationId: googleLogin
      responses:
        '302':
          description: Redirect ke Google OAuth authorization page
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/google/callback:
    get:
      tags:
        - OAuth
      summary: Google OAuth Callback Handler
      description: |
        Menerima callback dari Google OAuth dan melakukan login/registration.
        Jika user belum ada di database, sistem akan membuat user baru secara otomatis.
        Response berupa redirect ke frontend dengan JWT token.
      operationId: googleCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code dari Google
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: State parameter untuk CSRF protection
      responses:
        '302':
          description: Redirect ke frontend dengan JWT token
          headers:
            Location:
              description: Frontend URL dengan token
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ===========================
  # USERS ENDPOINTS (CRUD)
  # ===========================

  /users:
    get:
      tags:
        - Users
      summary: Daftar users dengan filter dan pagination
      description: |
        Mengambil daftar users dengan dukungan filter comprehensive, sorting, dan pagination.

        **Access Control**: Memerlukan permission 'read' pada module 2 (Users).
        - User dengan tingkat > 2 hanya bisa melihat user dengan tingkat >= authTingkat
        - User dengan tingkat <= 2 bisa akses semua user

        **Caching**: Menggunakan Redis cache dengan MD5 URL hash + auth token
      operationId: listUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Nomor halaman (mulai dari 1)
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Jumlah data per halaman
        - name: order_by
          in: query
          description: 'Urutan sorting (format: "field ASC/DESC")'
          schema:
            type: string
            default: created_at DESC
        - name: id_user
          in: query
          schema:
            type: integer
          description: Filter by user ID (IN operator support)
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username (LIKE operator, case-insensitive)
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by level ID (IN operator, comma-separated)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name (LIKE operator)
        - name: tingkat
          in: query
          schema:
            type: integer
          description: Filter by user tingkat (>= operator)
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Filter by group ID (IN operator, comma-separated)
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name (LIKE operator)
        - name: keterangan
          in: query
          schema:
            type: string
          description: Filter by description (LIKE operator)
        - name: reset
          in: query
          schema:
            type: string
            enum:
              - YA
              - TIDAK
          description: Filter by password reset flag
      responses:
        '200':
          description: Daftar users berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Users
      summary: Buat user baru
      description: |
        Membuat user baru dengan validasi lengkap.

        **Access Control**: Memerlukan permission 'create' pada module 2.
        **Password**: Akan di-hash menggunakan bcrypt sebelum disimpan.
        **created_by**:
        - Jika authTingkat <= 5: bisa specify di request body
        - Jika authTingkat > 5: automatic set ke authIdUser
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id_user:
                        type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Ambil data user spesifik
      description: |
        Mengambil data detail user berdasarkan ID.

        **Access Control**: Memerlukan permission 'read' pada module 2.
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID user yang akan diambil
      responses:
        '200':
          description: Data user berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user
      description: |
        Mengubah data user yang ada.

        **Access Control**: Memerlukan permission 'update' pada module 2.
        **Password**: Jika diisi, akan di-hash terlebih dahulu.
        **Restriction**: User dengan tingkat < authTingkat tidak bisa diupdate.
      operationId: updateUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID user yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Users
      summary: Hapus user
      description: |
        Menghapus user dari sistem.

        **Access Control**: Memerlukan permission 'delete' pada module 2.
        **Restriction**: User dengan tingkat < authTingkat tidak bisa dihapus.
      operationId: deleteUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID user yang akan dihapus
      responses:
        '200':
          description: User berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/single:
    get:
      tags:
        - Users
      summary: Ambil data user single dengan filter
      description: |
        Mengambil data satu user dengan filter spesifik.
        Hasil dibatasi hanya 1 row pertama yang cocok.

        **Access Control**: Memerlukan permission 'single' pada module 2.
        **Caching**: Menggunakan Redis cache dengan MD5 URL hash + auth token.
      operationId: getSingleUser
      security:
        - BearerAuth: []
      parameters:
        - name: id_user
          in: query
          schema:
            type: integer
          description: Filter by user ID
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username (LIKE)
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by level ID (IN)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name (LIKE)
        - name: tingkat
          in: query
          schema:
            type: integer
          description: Filter by user tingkat (>=)
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Filter by group ID (IN)
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name (LIKE)
        - name: keterangan
          in: query
          schema:
            type: string
          description: Filter by description (LIKE)
        - name: reset
          in: query
          schema:
            type: string
            enum:
              - YA
              - TIDAK
          description: Filter by reset flag
      responses:
        '200':
          description: Data user berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ===========================
  # USERS IMPORT ENDPOINTS
  # ===========================

  /users/import/excel:
    post:
      tags:
        - Users Import
      summary: Import bulk users dari Excel
      description: |
        Melakukan import multiple users dari file Excel dengan validasi lengkap.

        **Validasi**:
        1. Struktur kolom harus match dengan template
        2. Data harus valid (format, tipe data)
        3. Duplikasi username di file akan ditolak
        4. Foreign key (ids_grup, ids_kelurahan) harus ada di database

        **Response**: Summary dengan jumlah success/failure dan details error (max 50 rows).

        **File Format**: Excel (.xlsx, .xls)
        **Column Required**: Username, Password, Nama Lengkap, Jenis Kelamin
        **Column Optional**: ID Grup, ID Kelurahan, RW, RT, Alamat, No. Telepon
      operationId: importUsersExcel
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File Excel (.xlsx/.xls) dengan data users
      responses:
        '200':
          description: Users berhasil diimport
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportUsersResponse'
        '400':
          description: Validasi gagal atau file tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/import/preview:
    post:
      tags:
        - Users Import
      summary: Preview data Excel sebelum import
      description: |
        Mengecek dan preview data Excel sebelum diimport.
        Menampilkan validasi struktur, duplikasi, dan error details.

        **Preview**: Menampilkan header + 5 baris pertama dengan validation messages.
        **Stat**: Total rows, valid rows, invalid rows, duplicate rows, ready to import status.
      operationId: previewUsersExcel
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File Excel untuk preview
      responses:
        '200':
          description: Preview data Excel berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewUsersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/import/download-template:
    get:
      tags:
        - Users Import
      summary: Download template Excel untuk import
      description: |
        Download template Excel dengan struktur kolom yang benar dan contoh data.
        Template berisi header dan 3 baris contoh data.
      operationId: downloadUsersTemplate
      security:
        - BearerAuth: []
      responses:
        '200':
          description: File template Excel berhasil didownload
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ===========================
  # PROFILE ENDPOINTS (CRUD)
  # ===========================

  /profile:
    get:
      tags:
        - Profile
      summary: Daftar profile dengan filter dan pagination
      description: |
        Mengambil daftar profile user dengan comprehensive filtering dan pagination.

        **Access Control**: Memerlukan permission 'read' pada module 3 (Profile).
        **Geographic Filtering**: Support filtering by provinsi, kabkota, kecamatan, kelurahan.
        **Caching**: Menggunakan Redis cache dengan MD5 URL hash.
      operationId: listProfiles
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: order_by
          in: query
          schema:
            type: string
            default: created_at DESC
        - name: id_profile
          in: query
          schema:
            type: string
          description: Filter by profile ID (IN, comma-separated)
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username (LIKE)
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by level ID (IN)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name (LIKE)
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Filter by group ID (IN)
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name (LIKE)
        - name: nama_lengkap
          in: query
          schema:
            type: string
          description: Filter by full name (LIKE)
        - name: jenis_kelamin
          in: query
          schema:
            type: string
            enum:
              - LAKI-LAKI
              - PEREMPUAN
          description: Filter by gender
        - name: ids_provinsi
          in: query
          schema:
            type: string
          description: Filter by province ID (IN)
        - name: kode_provinsi
          in: query
          schema:
            type: string
          description: Filter by province code (IN)
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province name (LIKE)
        - name: pulau
          in: query
          schema:
            type: string
          description: Filter by island name
        - name: ids_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city ID (IN)
        - name: kode_kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city code (IN)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city name (LIKE)
        - name: ids_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district ID (IN)
        - name: kode_kecamatan
          in: query
          schema:
            type: string
          description: Filter by district code (IN)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: Filter by district name (LIKE)
        - name: ids_kelurahan
          in: query
          schema:
            type: string
          description: Filter by village ID (IN)
        - name: kode_kelurahan
          in: query
          schema:
            type: string
          description: Filter by village code (IN)
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Filter by village name (LIKE)
        - name: nmr_tlpn
          in: query
          schema:
            type: string
          description: Filter by phone number (LIKE)
      responses:
        '200':
          description: Daftar profile berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Profile
      summary: Buat profile user baru
      description: |
        Membuat profile user baru dengan validasi data personal dan geographic.

        **Access Control**: Memerlukan permission 'create' pada module 3.
        **created_by**:
        - Jika authTingkat <= 5: bisa specify di request body
        - Jika authTingkat > 5: automatic set ke authIdUser
      operationId: createProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
      responses:
        '200':
          description: Profile berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id_profile:
                        type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profile/{id}:
    get:
      tags:
        - Profile
      summary: Ambil data profile spesifik
      description: Mengambil data detail profile berdasarkan ID.
      operationId: getProfileById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID profile yang akan diambil
      responses:
        '200':
          description: Data profile berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Profile
      summary: Update profile
      description: Mengubah data profile user yang ada (semua field opsional).
      operationId: updateProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID profile yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Profile
      summary: Hapus profile
      description: Menghapus profile user dari sistem.
      operationId: deleteProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Profile berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profile/single:
    get:
      tags:
        - Profile
      summary: Ambil data profile single dengan filter
      description: |
        Mengambil data satu profile dengan filter spesifik.
        Hasil dibatasi hanya 1 row pertama yang cocok.

        **Caching**: Menggunakan Redis cache dengan MD5 URL hash.
      operationId: getSingleProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id_profile
          in: query
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
        - name: ids_level
          in: query
          schema:
            type: string
        - name: level
          in: query
          schema:
            type: string
        - name: ids_grup
          in: query
          schema:
            type: string
        - name: grup
          in: query
          schema:
            type: string
        - name: nama_lengkap
          in: query
          schema:
            type: string
        - name: jenis_kelamin
          in: query
          schema:
            type: string
            enum:
              - LAKI-LAKI
              - PEREMPUAN
        - name: ids_provinsi
          in: query
          schema:
            type: integer
        - name: provinsi
          in: query
          schema:
            type: string
        - name: ids_kabkota
          in: query
          schema:
            type: integer
        - name: kabkota
          in: query
          schema:
            type: string
        - name: ids_kecamatan
          in: query
          schema:
            type: integer
        - name: kecamatan
          in: query
          schema:
            type: string
        - name: ids_kelurahan
          in: query
          schema:
            type: integer
        - name: kelurahan
          in: query
          schema:
            type: string
        - name: nmr_tlpn
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Data profile berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ===========================
  # CABANG ENDPOINTS (CRUD)
  # ===========================

  /settings/cabang:
    get:
      tags:
        - Cabang PPBI
      summary: Daftar cabang dengan filter dan pagination
      description: |
        Mengambil daftar cabang dengan dukungan filter geographic, status, sorting, pagination, dan Redis cache.

        **Access Control**: Memerlukan permission 'read' pada module 4 (Cabang).
        **Caching**: Menggunakan Redis cache dengan MD5 URL hash, TTL configurable.
      operationId: listCabang
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: order_by
          in: query
          schema:
            type: string
            default: created_at DESC
        - name: ids_cabang
          in: query
          schema:
            type: string
          description: Filter by cabang ID (IN, comma-separated)
        - name: cabang
          in: query
          schema:
            type: string
          description: Filter by cabang name (LIKE)
        - name: ids_provinsi
          in: query
          schema:
            type: integer
          description: Filter by province ID
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province name (LIKE)
        - name: pulau
          in: query
          schema:
            type: string
          description: Filter by island name (LIKE)
        - name: ids_kabkota
          in: query
          schema:
            type: integer
          description: Filter by regency/city ID
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city name (LIKE)
        - name: alamat
          in: query
          schema:
            type: string
          description: Filter by address (LIKE)
        - name: status
          in: query
          schema:
            type: string
            enum:
              - YA
              - TIDAK
          description: Filter by status (YA=active, TIDAK=inactive)
      responses:
        '200':
          description: Daftar cabang berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CabangListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Cabang PPBI
      summary: Buat cabang baru
      description: |
        Membuat cabang baru dengan validasi lokasi dan status.

        **Access Control**: Memerlukan permission 'create' pada module 4.
      operationId: createCabang
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCabangRequest'
      responses:
        '200':
          description: Cabang berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      ids_cabang:
                        type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /settings/cabang/{id}:
    get:
      tags:
        - Cabang PPBI
      summary: Ambil data cabang spesifik
      description: Mengambil data detail cabang berdasarkan ID.
      operationId: getCabangById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID cabang yang akan diambil
      responses:
        '200':
          description: Data cabang berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCabangResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Cabang PPBI
      summary: Update cabang
      description: Mengubah data cabang yang ada (semua field opsional).
      operationId: updateCabang
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCabangRequest'
      responses:
        '200':
          description: Cabang berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Cabang PPBI
      summary: Hapus cabang
      description: Menghapus cabang dari sistem.
      operationId: deleteCabang
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cabang berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /settings/cabang/single:
    get:
      tags:
        - Cabang PPBI
      summary: Ambil data cabang single dengan filter
      description: |
        Mengambil data satu cabang dengan filter spesifik.
        Hasil dibatasi hanya 1 row pertama yang cocok.

        **Caching**: Menggunakan Redis cache dengan MD5 URL hash.
      operationId: getSingleCabang
      security:
        - BearerAuth: []
      parameters:
        - name: ids_cabang
          in: query
          schema:
            type: integer
        - name: cabang
          in: query
          schema:
            type: string
        - name: ids_provinsi
          in: query
          schema:
            type: integer
        - name: provinsi
          in: query
          schema:
            type: string
        - name: pulau
          in: query
          schema:
            type: string
        - name: ids_kabkota
          in: query
          schema:
            type: integer
        - name: kabkota
          in: query
          schema:
            type: string
        - name: alamat
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum:
              - YA
              - TIDAK
      responses:
        '200':
          description: Data cabang berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCabangResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    # ===========================
    # REQUEST SCHEMAS
    # ===========================

    RegisterRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 20
          pattern: ^[a-zA-Z0-9._]+$
          example: john_doe
          description: Username harus 4-20 karakter, hanya alphanumeric, underscore, dan titik
        password:
          type: string
          minLength: 8
          example: SecurePass@123
          description: Password minimal 8 karakter (akan di-hash dengan bcrypt)
        reset:
          type: string
          enum:
            - YA
            - TIDAK
          default: TIDAK
          description: Flag untuk bypass validasi password yang kuat

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: john_doe
        password:
          type: string
          example: SecurePass@123

    CreateUserRequest:
      type: object
      required:
        - ids_grup
        - username
        - password
      properties:
        ids_grup:
          type: integer
          example: 1
          description: ID grup/group yang user ini akan masuk
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: new_user
        password:
          type: string
          minLength: 8
          example: SecurePass@123
        reset:
          type: string
          enum:
            - YA
            - TIDAK
          default: TIDAK
        created_by:
          type: integer
          description: User ID yang membuat (conditional, hanya jika authTingkat <= 5)

    UpdateUserRequest:
      type: object
      properties:
        ids_grup:
          type: integer
        username:
          type: string
        password:
          type: string
          description: Password baru (opsional, akan di-hash jika diisi)
        reset:
          type: string
          enum:
            - YA
            - TIDAK

    CreateProfileRequest:
      type: object
      required:
        - nama_lengkap
        - jenis_kelamin
      properties:
        nama_lengkap:
          type: string
          minLength: 3
          maxLength: 255
          example: John Doe
        jenis_kelamin:
          type: string
          enum:
            - LAKI-LAKI
            - PEREMPUAN
        ids_kelurahan:
          type: integer
          description: Kelurahan/village ID (opsional)
        rw:
          type: string
          maxLength: 5
          description: RW (opsional)
        rt:
          type: string
          maxLength: 5
          description: RT (opsional)
        alamat:
          type: string
          description: Alamat (opsional)
        nmr_tlpn:
          type: string
          minLength: 10
          maxLength: 20
          description: Nomor telepon (opsional)
        foto:
          type: string
          example: https://example.com/photo.jpg
          description: URL foto (opsional, http/https)

    UpdateProfileRequest:
      type: object
      properties:
        nama_lengkap:
          type: string
          minLength: 3
          maxLength: 255
        jenis_kelamin:
          type: string
          enum:
            - LAKI-LAKI
            - PEREMPUAN
        ids_kelurahan:
          type: integer
        rw:
          type: string
        rt:
          type: string
        alamat:
          type: string
        nmr_tlpn:
          type: string
        foto:
          type: string

    CreateCabangRequest:
      type: object
      required:
        - cabang
        - ids_kabkota
        - alamat
        - status
      properties:
        cabang:
          type: string
          example: Cabang Jakarta Pusat
        ids_kabkota:
          type: integer
          example: 101
          description: Kabupaten/city ID
        alamat:
          type: string
          example: Jl. Merdeka No. 1, Jakarta Pusat 12190
        status:
          type: string
          enum:
            - YA
            - TIDAK
          description: YA=active, TIDAK=inactive

    UpdateCabangRequest:
      type: object
      properties:
        cabang:
          type: string
        ids_kabkota:
          type: integer
        alamat:
          type: string
        status:
          type: string
          enum:
            - YA
            - TIDAK

    # ===========================
    # RESPONSE SCHEMAS
    # ===========================

    RegisterResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Data added successfully.
        data:
          type: object
          properties:
            id_user:
              type: integer

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT Bearer token

    UserListResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserData'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    SingleUserResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/UserData'

    ImportUsersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            summary:
              type: object
              properties:
                total_rows:
                  type: integer
                valid_rows:
                  type: integer
                duplicate_rows:
                  type: integer
                import_success:
                  type: integer
                import_failure:
                  type: integer
                success_rate:
                  type: string
            details:
              type: array
              maxItems: 50
            timestamp:
              type: string

    PreviewUsersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            file_info:
              type: object
              properties:
                total_rows:
                  type: integer
                valid_rows:
                  type: integer
                invalid_rows:
                  type: integer
                duplicate_rows:
                  type: integer
                ready_to_import:
                  type: boolean
            column_mapping:
              type: object
            preview_data:
              type: array
            validation_summary:
              type: object
            errors:
              type: object

    ProfileListResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProfileData'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    SingleProfileResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/ProfileData'

    CabangListResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/CabangData'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    SingleCabangResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/CabangData'

    # ===========================
    # DATA MODEL SCHEMAS
    # ===========================

    UserData:
      type: object
      properties:
        id_user:
          type: integer
        ids_grup:
          type: integer
        username:
          type: string
        level:
          type: string
        tingkat:
          type: integer
        grup:
          type: string
        keterangan:
          type: string
        reset:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProfileData:
      type: object
      properties:
        id_profile:
          type: integer
        user_id:
          type: integer
        username:
          type: string
        nama_lengkap:
          type: string
        jenis_kelamin:
          type: string
        ids_kelurahan:
          type: integer
        rw:
          type: string
        rt:
          type: string
        alamat:
          type: string
        nmr_tlpn:
          type: string
        foto:
          type: string
        ids_provinsi:
          type: integer
        provinsi:
          type: string
        ids_kabkota:
          type: integer
        kabkota:
          type: string
        ids_kecamatan:
          type: integer
        kecamatan:
          type: string
        ids_kelurahan_detail:
          type: integer
        kelurahan:
          type: string
        pulau:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CabangData:
      type: object
      properties:
        ids_cabang:
          type: integer
        cabang:
          type: string
        ids_kabkota:
          type: integer
        ids_provinsi:
          type: integer
        provinsi:
          type: string
        kabkota:
          type: string
        pulau:
          type: string
        alamat:
          type: string
        status:
          type: string
          enum:
            - YA
            - TIDAK
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        error:
          type: object

  responses:
    BadRequest:
      description: Request tidak valid atau validasi gagal
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Token tidak valid, belum login, atau token expired
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Access denied - user tidak memiliki permission untuk action ini
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Data tidak ditemukan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Terjadi kesalahan pada server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token yang didapatkan dari endpoint login atau Google OAuth.

        Token digunakan untuk autentikasi semua endpoint yang dilindungi.
        Simpan di header: Authorization: Bearer <token>

        TTL token configurable via environment variable JWT_EXPIRED_IN (default: days)

security:
  - BearerAuth: []
