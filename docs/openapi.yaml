openapi: 3.0.3
info:
  title: API PPBI - Complete Service (Auth, Users, Profile Management)
  version: 1.3.0
  description: |
    Dokumentasi lengkap Complete API Service untuk PPBI (Persatuan Penggemar Bonsai Indonesia).
    Sistem mencakup autentikasi pengguna, manajemen users dengan bulk import, dan management profil user yang detail.
  contact:
    name: API Support
    email: support@ppbi.local
  x-changelog:
    - version: 1.3.0
      date: 2025-10-29
      changes:
        - Added complete Profile Management CRUD endpoints
        - Added profile read with advanced filtering, sorting, and pagination
        - Added profile single retrieval with multiple filter options
        - Added geographic data support (provinsi, kabkota, kecamatan, kelurahan)
        - Added profile photo/image field support (URL or # placeholder)
        - Redis caching for profile operations (read and single)
        - Non-destructive merge with users.js (1.2.0)
        - Access control based on user level and module permissions
    - version: 1.2.0
      date: 2025-10-29
      changes:
        - Added complete Users CRUD endpoints
        - Added Excel import functionality
        - Added Redis caching for user listing
    - version: 1.1.0
      date: 2025-10-29
      changes:
        - Added Google OAuth authentication
        - Added token management endpoints

servers:
  - url: http://localhost:5000/api
    description: Development Server
    variables:
      port:
        default: '5000'
  - url: https://api.ppbi.id/api
    description: Production Server

tags:
  - name: Authentication
    description: Endpoints untuk autentikasi pengguna
  - name: Token Management
    description: Endpoints untuk manajemen token JWT
  - name: OAuth
    description: Endpoints untuk autentikasi OAuth (Google)
  - name: Users
    description: Endpoints untuk manajemen data pengguna (CRUD)
  - name: Users Import
    description: Endpoints untuk import bulk users dari Excel
  - name: Profile
    description: Endpoints untuk manajemen profil user yang detail

paths:
  /auth/google:
    get:
      tags:
        - OAuth
      summary: Redirect ke Google OAuth
      description: Mengarahkan user ke halaman login Google
      operationId: googleLogin
      responses:
        '302':
          description: Redirect ke Google OAuth authorization page
          headers:
            Location:
              schema:
                type: string
              description: URL redirect ke Google OAuth
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/google/callback:
    get:
      tags:
        - OAuth
      summary: Google OAuth Callback
      description: Callback endpoint setelah user login via Google
      operationId: googleCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code dari Google
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: State parameter untuk CSRF protection
      responses:
        '302':
          description: Redirect ke frontend dengan JWT token
          headers:
            Location:
              schema:
                type: string
              description: Frontend URL dengan token
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register pengguna baru
      description: Membuat akun pengguna baru dengan validasi input lengkap
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              normal:
                summary: Register dengan password validation
                value:
                  username: john_doe
                  password: Secure@Pass123
                  confirm_password: Secure@Pass123
                  reset: TIDAK
              reset:
                summary: Register dengan flag reset
                value:
                  username: admin_user
                  password: TempPass@123
                  confirm_password: TempPass@123
                  reset: YA
      responses:
        '200':
          description: User berhasil didaftarkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Validasi input gagal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login pengguna
      description: Melakukan login dengan username dan password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validasi atau autentikasi gagal
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout pengguna
      description: Mengeluarkan user dan menginvalidasi token
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/create:
    post:
      tags:
        - Token Management
      summary: Buat token baru
      description: Generate JWT token baru dengan payload yang diberikan
      operationId: createToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
      responses:
        '200':
          description: Token berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/refresh:
    post:
      tags:
        - Token Management
      summary: Refresh token
      description: Membuat token baru berdasarkan token yang masih aktif
      operationId: refreshToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
      responses:
        '200':
          description: Token berhasil di-refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/check:
    get:
      tags:
        - Token Management
      summary: Validasi token
      description: Memeriksa apakah token masih aktif dan valid
      operationId: checkToken
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token masih aktif
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/delete:
    delete:
      tags:
        - Token Management
      summary: Hapus/invalidate token
      description: Menghapus atau menginvalidasi token yang diberikan
      operationId: deleteToken
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTokenRequest'
      responses:
        '200':
          description: Token berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Token tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - Users
      summary: Daftar pengguna dengan filter dan pagination
      description: Mengambil daftar pengguna dengan dukungan filter advanced, pagination, dan Redis cache
      operationId: listUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Nomor halaman (default 1)
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Jumlah data per halaman (default 10)
        - name: order_by
          in: query
          schema:
            type: string
            default: created_at DESC
          description: Urutan sorting (field ASC/DESC)
        - name: id_user
          in: query
          schema:
            type: integer
          description: Filter by user ID
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username (LIKE query)
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by user levels (comma-separated IDs untuk IN query)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name (LIKE query)
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Filter by group IDs (comma-separated untuk IN query)
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name (LIKE query)
      responses:
        '200':
          description: Daftar pengguna berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Users
      summary: Buat pengguna baru
      description: Membuat pengguna baru dengan validasi lengkap
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Validasi gagal atau user sudah ada
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    put:
      tags:
        - Users
      summary: Update pengguna
      description: Mengubah data pengguna yang ada
      operationId: updateUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID pengguna yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validasi gagal atau tidak ada perubahan
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Users
      summary: Hapus pengguna
      description: Menghapus pengguna dari sistem
      operationId: deleteUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID pengguna yang akan dihapus
      responses:
        '200':
          description: User berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/single:
    get:
      tags:
        - Users
      summary: Ambil data pengguna single
      description: Mengambil data satu pengguna dengan filter spesifik
      operationId: getSingleUser
      security:
        - BearerAuth: []
      parameters:
        - name: id_user
          in: query
          schema:
            type: integer
          description: Filter by user ID
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by user levels
      responses:
        '200':
          description: Data pengguna berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/import/preview:
    post:
      tags:
        - Users Import
      summary: Preview Excel sebelum import
      description: Membaca dan memvalidasi file Excel sebelum melakukan import ke database
      operationId: previewExcelImport
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File Excel (.xlsx/.xls) dengan data users
      responses:
        '200':
          description: Preview file berhasil dibaca
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewExcelResponse'
        '400':
          description: Validasi file gagal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/import/excel:
    post:
      tags:
        - Users Import
      summary: Import users dari Excel
      description: Melakukan bulk import data pengguna dari file Excel ke database
      operationId: importExcelUsers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File Excel (.xlsx/.xls) dengan data users yang sudah divalidasi
      responses:
        '200':
          description: Import berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportExcelResponse'
        '400':
          description: Validasi atau error import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/import/download-template:
    get:
      tags:
        - Users Import
      summary: Download template Excel
      description: Download template file Excel untuk import users
      operationId: downloadExcelTemplate
      responses:
        '200':
          description: Template file berhasil didownload
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profile:
    get:
      tags:
        - Profile
      summary: Daftar profil dengan filter dan pagination
      description: Mengambil daftar profil pengguna dengan dukungan filter advanced, pagination, sorting, dan Redis cache
      operationId: listProfiles
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Nomor halaman (default 1)
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Jumlah data per halaman (default 10)
        - name: order_by
          in: query
          schema:
            type: string
            default: created_at DESC
          description: Urutan sorting (field ASC/DESC)
        - name: id_profile
          in: query
          schema:
            type: string
          description: Filter by profile ID (IN query, comma-separated)
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username
        - name: ids_level
          in: query
          schema:
            type: string
          description: Filter by level ID (IN query)
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name (LIKE query)
        - name: ids_grup
          in: query
          schema:
            type: string
          description: Filter by group ID (IN query)
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name (LIKE query)
        - name: nama_lengkap
          in: query
          schema:
            type: string
          description: Filter by full name (LIKE query)
        - name: jenis_kelamin
          in: query
          schema:
            type: string
            enum: [LAKI-LAKI, PEREMPUAN]
          description: Filter by gender
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province (LIKE query)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city (LIKE query)
        - name: kecamatan
          in: query
          schema:
            type: string
          description: Filter by district (LIKE query)
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Filter by village (LIKE query)
        - name: nmr_tlpn
          in: query
          schema:
            type: string
          description: Filter by phone number (LIKE query)
      responses:
        '200':
          description: Daftar profil berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Profile
      summary: Buat profil baru
      description: Membuat profil pengguna baru dengan validasi lengkap
      operationId: createProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
      responses:
        '200':
          description: Profil berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileResponse'
        '400':
          description: Validasi gagal
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profile/{id}:
    put:
      tags:
        - Profile
      summary: Update profil
      description: Mengubah data profil yang ada (semua field opsional)
      operationId: updateProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID profil yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profil berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validasi gagal atau tidak ada perubahan
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Profil tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Profile
      summary: Hapus profil
      description: Menghapus profil pengguna dari sistem
      operationId: deleteProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID profil yang akan dihapus
      responses:
        '200':
          description: Profil berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Profil tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profile/single:
    get:
      tags:
        - Profile
      summary: Ambil data profil single
      description: Mengambil data satu profil dengan filter spesifik dan Redis cache
      operationId: getSingleProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id_profile
          in: query
          schema:
            type: integer
          description: Filter by profile ID
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username
        - name: ids_level
          in: query
          schema:
            type: integer
          description: Filter by level ID
        - name: level
          in: query
          schema:
            type: string
          description: Filter by level name (LIKE query)
        - name: ids_grup
          in: query
          schema:
            type: integer
          description: Filter by group ID
        - name: grup
          in: query
          schema:
            type: string
          description: Filter by group name (LIKE query)
        - name: nama_lengkap
          in: query
          schema:
            type: string
          description: Filter by full name (LIKE query)
        - name: jenis_kelamin
          in: query
          schema:
            type: string
            enum: [LAKI-LAKI, PEREMPUAN]
          description: Filter by gender
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by province (LIKE query)
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by regency/city (LIKE query)
        - name: kelurahan
          in: query
          schema:
            type: string
          description: Filter by village (LIKE query)
        - name: nmr_tlpn
          in: query
          schema:
            type: string
          description: Filter by phone number (LIKE query)
      responses:
        '200':
          description: Data profil berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - confirm_password
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 20
          pattern: '^[a-zA-Z0-9._]+$'
          description: Username pengguna (4-20 karakter)
          example: john_doe
        password:
          type: string
          minLength: 8
          description: Password dengan kombinasi huruf kecil, besar, angka, simbol (minimal 8 karakter)
          example: Secure@Pass123
        confirm_password:
          type: string
          description: Konfirmasi password (harus sama dengan password)
          example: Secure@Pass123
        reset:
          type: string
          enum: [YA, TIDAK]
          default: TIDAK
          description: Flag untuk bypass password validation
          example: TIDAK

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username pengguna
          example: john_doe
        password:
          type: string
          description: Password pengguna
          example: Secure@Pass123

    CreateTokenRequest:
      type: object
      required:
        - payload
      properties:
        payload:
          type: object
          description: Payload yang akan di-encode ke dalam JWT token
          additionalProperties: true

    DeleteTokenRequest:
      type: object
      properties:
        keterangan:
          type: string
          default: LOGOUT
          description: Keterangan alasan penghapusan token
          example: LOGOUT

    CreateUserRequest:
      type: object
      required:
        - ids_grup
        - username
        - password
        - confirm_password
      properties:
        ids_grup:
          type: integer
          description: ID grup pengguna (harus integer positif)
          example: 1
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9._]+$'
          description: Username pengguna (3-50 karakter)
          example: newuser
        password:
          type: string
          minLength: 8
          description: Password dengan kombinasi huruf kecil, besar, angka, simbol (minimal 8 karakter)
          example: SecurePass@123
        confirm_password:
          type: string
          description: Konfirmasi password
          example: SecurePass@123
        reset:
          type: string
          enum: [YA, TIDAK]
          default: TIDAK
          description: Flag untuk bypass password validation
          example: TIDAK

    UpdateUserRequest:
      type: object
      properties:
        ids_grup:
          type: integer
          description: ID grup pengguna (opsional)
          example: 2
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9._]+$'
          description: Username pengguna (opsional, 3-50 karakter)
          example: updated_username
        password:
          type: string
          minLength: 8
          description: Password baru (opsional)
          example: NewSecurePass@456
        confirm_password:
          type: string
          description: Konfirmasi password baru (opsional)
          example: NewSecurePass@456
        reset:
          type: string
          enum: [YA, TIDAK]
          description: Flag untuk bypass password validation (opsional)
          example: TIDAK

    CreateProfileRequest:
      type: object
      required:
        - nama_lengkap
        - jenis_kelamin
      properties:
        nama_lengkap:
          type: string
          minLength: 3
          maxLength: 255
          description: Nama lengkap pengguna (3-255 karakter, wajib)
          example: John Doe
        jenis_kelamin:
          type: string
          enum: [LAKI-LAKI, PEREMPUAN]
          description: Jenis kelamin (LAKI-LAKI atau PEREMPUAN, wajib)
          example: LAKI-LAKI
        ids_kelurahan:
          type: integer
          nullable: true
          description: ID kelurahan (opsional)
          example: 5
        rw:
          type: string
          maxLength: 5
          nullable: true
          description: RW - max 5 karakter (opsional)
          example: '02'
        rt:
          type: string
          maxLength: 5
          nullable: true
          description: RT - max 5 karakter (opsional)
          example: '03'
        alamat:
          type: string
          nullable: true
          description: Alamat lengkap (opsional, tipe text)
          example: Jl. Merdeka No. 1, Kota
        nmr_tlpn:
          type: string
          minLength: 10
          maxLength: 20
          nullable: true
          description: Nomor telepon - 10-20 karakter (opsional)
          example: '081234567890'
        foto:
          type: string
          nullable: true
          description: URL foto profil atau # untuk no image (opsional, harus valid URL http/https atau #)
          example: https://example.com/photo.jpg

    UpdateProfileRequest:
      type: object
      properties:
        nama_lengkap:
          type: string
          minLength: 3
          maxLength: 255
          description: Nama lengkap pengguna (opsional, 3-255 karakter)
          example: John Doe Updated
        jenis_kelamin:
          type: string
          enum: [LAKI-LAKI, PEREMPUAN]
          description: Jenis kelamin (opsional)
          example: LAKI-LAKI
        ids_kelurahan:
          type: integer
          nullable: true
          description: ID kelurahan (opsional)
          example: 5
        rw:
          type: string
          maxLength: 5
          nullable: true
          description: RW - max 5 karakter (opsional)
          example: '02'
        rt:
          type: string
          maxLength: 5
          nullable: true
          description: RT - max 5 karakter (opsional)
          example: '03'
        alamat:
          type: string
          nullable: true
          description: Alamat lengkap (opsional)
          example: Jl. Merdeka No. 2, Kota
        nmr_tlpn:
          type: string
          minLength: 10
          maxLength: 20
          nullable: true
          description: Nomor telepon - 10-20 karakter (opsional)
          example: '081234567891'
        foto:
          type: string
          nullable: true
          description: URL foto profil atau # untuk no image (opsional)
          example: https://example.com/photo_new.jpg

    ProfileData:
      type: object
      properties:
        id_profile:
          type: integer
          description: ID profil
          example: 1
        username:
          type: string
          description: Username pengguna
          example: john_doe
        nama_lengkap:
          type: string
          description: Nama lengkap
          example: John Doe
        jenis_kelamin:
          type: string
          enum: [LAKI-LAKI, PEREMPUAN]
          description: Jenis kelamin
          example: LAKI-LAKI
        ids_level:
          type: integer
          nullable: true
          description: ID level/role
          example: 1
        level:
          type: string
          nullable: true
          description: Nama level/role
          example: Admin
        ids_grup:
          type: integer
          nullable: true
          description: ID grup
          example: 1
        grup:
          type: string
          nullable: true
          description: Nama grup
          example: Administrator
        ids_provinsi:
          type: integer
          nullable: true
          description: ID provinsi
          example: 1
        kode_provinsi:
          type: string
          nullable: true
          description: Kode provinsi
          example: '11'
        provinsi:
          type: string
          nullable: true
          description: Nama provinsi
          example: DKI Jakarta
        pulau:
          type: string
          nullable: true
          description: Nama pulau
          example: Jawa
        ids_kabkota:
          type: integer
          nullable: true
          description: ID kabupaten/kota
          example: 101
        kode_kabkota:
          type: string
          nullable: true
          description: Kode kabupaten/kota
          example: '1101'
        kabkota:
          type: string
          nullable: true
          description: Nama kabupaten/kota
          example: Jakarta Pusat
        ids_kecamatan:
          type: integer
          nullable: true
          description: ID kecamatan
          example: 1001
        kode_kecamatan:
          type: string
          nullable: true
          description: Kode kecamatan
          example: '110101'
        kecamatan:
          type: string
          nullable: true
          description: Nama kecamatan
          example: Menteng
        ids_kelurahan:
          type: integer
          nullable: true
          description: ID kelurahan
          example: 10001
        kode_kelurahan:
          type: string
          nullable: true
          description: Kode kelurahan
          example: '1101010'
        kelurahan:
          type: string
          nullable: true
          description: Nama kelurahan
          example: Cikini
        rw:
          type: string
          nullable: true
          description: RW
          example: '02'
        rt:
          type: string
          nullable: true
          description: RT
          example: '03'
        alamat:
          type: string
          nullable: true
          description: Alamat lengkap
          example: Jl. Merdeka No. 1, Kota
        nmr_tlpn:
          type: string
          nullable: true
          description: Nomor telepon
          example: '081234567890'
        foto:
          type: string
          nullable: true
          description: URL foto profil atau #
          example: https://example.com/photo.jpg
        created_by:
          type: integer
          description: Created by user ID
          example: 1
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan
          example: '2025-10-29T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: Waktu update terakhir
          example: null

    UserData:
      type: object
      properties:
        id_user:
          type: integer
          example: 1
        username:
          type: string
          example: john_doe
        nama:
          type: string
          example: John Doe
        jenis_kelamin:
          type: string
          enum: [LAKI-LAKI, PEREMPUAN]
          example: LAKI-LAKI
        ids_level:
          type: integer
          example: 1
        level:
          type: string
          example: Admin
        ids_grup:
          type: integer
          example: 1
        grup:
          type: string
          example: Administrator
        created_at:
          type: string
          format: date-time
          example: '2025-10-29T00:00:00Z'

    RegisterResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Data added successfully.
        data:
          type: object
          properties:
            id_user:
              type: integer
              example: 123

    LoginResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: ''
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT token
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    TokenResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Token has been refreshed successfully
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    CreateUserResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Data added successfully.
        data:
          type: object
          properties:
            id_user:
              type: integer
              example: 123

    CreateProfileResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Data added successfully.
        data:
          type: object
          properties:
            id_profile:
              type: integer
              example: 123

    UserListResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: ''
        data:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserData'
            pagination:
              $ref: '#/components/schemas/Pagination'

    SingleUserResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: ''
        data:
          $ref: '#/components/schemas/UserData'

    ProfileListResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: ''
        data:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ProfileData'
            pagination:
              $ref: '#/components/schemas/Pagination'

    SingleProfileResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: ''
        data:
          $ref: '#/components/schemas/ProfileData'

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          description: Halaman saat ini
          example: 1
        per_page:
          type: integer
          description: Data per halaman
          example: 10
        total:
          type: integer
          description: Total semua data
          example: 50
        last_page:
          type: integer
          description: Halaman terakhir
          example: 5

    PreviewExcelResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Preview file Excel berhasil.
        data:
          type: object
          properties:
            file_info:
              type: object
              properties:
                total_rows:
                  type: integer
                  example: 100
                valid_rows:
                  type: integer
                  example: 95
                invalid_rows:
                  type: integer
                  example: 3
                duplicate_rows:
                  type: integer
                  example: 2
                ready_to_import:
                  type: boolean
                  example: true
            validation_summary:
              type: object
              properties:
                is_valid:
                  type: boolean
                structure_valid:
                  type: boolean
                no_duplicates:
                  type: boolean
                has_valid_data:
                  type: boolean

    ImportExcelResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Data berhasil diimport.
        data:
          type: object
          properties:
            summary:
              type: object
              properties:
                total_rows:
                  type: integer
                  example: 100
                import_success:
                  type: integer
                  example: 92
                import_failure:
                  type: integer
                  example: 3
                success_rate:
                  type: string
                  example: '96%'

    SuccessResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          enum: [success]
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          enum: [error]
        message:
          oneOf:
            - type: string
            - type: object

    ValidationError:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          enum: [error]
        message:
          type: object
          description: Object berisi field dan error message untuk setiap field
          additionalProperties:
            type: string
          example:
            nama_lengkap: nama lengkap harus 3-255 karakter.
            jenis_kelamin: jenis kelamin tidak valid. harus LAKI-LAKI atau PEREMPUAN.
            nmr_tlpn: nomor telepon harus 10-20 karakter.

    JWTPayload:
      type: object
      description: Struktur data yang di-encode dalam JWT token
      properties:
        userTime:
          type: string
          example: '1698051399'
        app:
          type: string
          example: PPBI
        id_user:
          type: integer
          example: 123
        username:
          type: string
          example: john_doe
        nama:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        ids_level:
          type: integer
          nullable: true
          example: 1
        level:
          type: string
          nullable: true
          example: Admin
        ids_grup:
          type: integer
          nullable: true
          example: 1
        grup:
          type: string
          nullable: true
          example: Administrator
        login_as:
          type: string
          enum: [YA, TIDAK]
          example: TIDAK
        id_admin:
          type: integer
          nullable: true
          example: null
        iat:
          type: integer
          example: 1698051399
        exp:
          type: integer
          example: 1698373399

  responses:
    BadRequest:
      description: Request tidak valid atau validasi gagal
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Token tidak valid atau tidak diberikan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource tidak ditemukan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Terjadi kesalahan pada server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token didapatkan dari endpoint login atau Google OAuth callback

security:
  - BearerAuth: []
