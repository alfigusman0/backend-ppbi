openapi: 3.0.3
info:
  title: API PPBI - Authentication Service
  version: 1.1.0
  description: |
    Authentication API untuk PPBI (Persatuan Penggemar Bonsai Indonesia).
    Sistem autentikasi mendukung login tradisional, Google OAuth, dan manajemen token JWT.
  contact:
    name: API Support
    email: support@ppbi.local
  x-changelog:
    - version: 1.1.0
      date: 2025-10-29
      changes:
        - Added Google OAuth authentication
        - Added token management endpoints
        - Added Redis/Database session support
        - Added comprehensive input validation

servers:
  - url: http://localhost:5000/api
    description: Development Server
    variables:
      port:
        default: '5000'
  - url: https://api.ppbi.id/api
    description: Production Server

tags:
  - name: Authentication
    description: Endpoints untuk autentikasi pengguna
  - name: Token Management
    description: Endpoints untuk manajemen token JWT
  - name: OAuth
    description: Endpoints untuk autentikasi OAuth (Google)

paths:
  /auth/google:
    get:
      tags:
        - OAuth
      summary: Redirect ke Google OAuth
      description: Mengarahkan user ke halaman login Google
      operationId: googleLogin
      responses:
        '302':
          description: Redirect ke Google OAuth authorization page
          headers:
            Location:
              schema:
                type: string
              description: URL redirect ke Google OAuth
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/google/callback:
    get:
      tags:
        - OAuth
      summary: Google OAuth Callback
      description: Callback endpoint setelah user login via Google
      operationId: googleCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code dari Google
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: State parameter untuk CSRF protection
      responses:
        '302':
          description: Redirect ke frontend dengan JWT token
          headers:
            Location:
              schema:
                type: string
              description: Frontend URL dengan token
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register pengguna baru
      description: Membuat akun pengguna baru dengan validasi input lengkap
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              normal:
                summary: Register dengan password validation
                value:
                  username: john_doe
                  password: Secure@Pass123
                  confirm_password: Secure@Pass123
                  reset: TIDAK
              reset:
                summary: Register dengan flag reset
                value:
                  username: admin_user
                  password: TempPass@123
                  confirm_password: TempPass@123
                  reset: YA
      responses:
        '200':
          description: User berhasil didaftarkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
              example:
                code: 200
                status: success
                message: Data added successfully.
                data:
                  id_user: 123
        '400':
          description: Validasi input gagal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                code: 400
                status: error
                message:
                  username: username harus 4-20 karakter.
                  password: password harus minimal 8 karakter dengan kombinasi huruf kecil, huruf besar, angka, dan simbol.
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login pengguna
      description: Melakukan login dengan username dan password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: john_doe
              password: Secure@Pass123
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                code: 200
                status: success
                message: ''
                data:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Validasi atau autentikasi gagal
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
              examples:
                validation_error:
                  value:
                    code: 400
                    status: error
                    message:
                      username: username tidak boleh kosong.
                      password: password tidak boleh kosong.
                user_not_found:
                  value:
                    code: 400
                    status: error
                    message: username not found.
                wrong_password:
                  value:
                    code: 400
                    status: error
                    message: Password is wrong.
                google_login:
                  value:
                    code: 400
                    status: error
                    message: Anda login menggunakan google. silahkan login kembali menggunakan google.
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout pengguna
      description: Mengeluarkan user dan menginvalidasi token
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                code: 200
                status: success
                message: You have successfully logged out!
                data: {}
        '400':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/create:
    post:
      tags:
        - Token Management
      summary: Buat token baru
      description: Generate JWT token baru dengan payload yang diberikan
      operationId: createToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
            example:
              payload:
                id_user: 123
                username: john_doe
                email: john@example.com
                role: user
      responses:
        '200':
          description: Token berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              example:
                code: 200
                status: success
                message: ''
                data:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/refresh:
    post:
      tags:
        - Token Management
      summary: Refresh token
      description: Membuat token baru berdasarkan token yang masih aktif
      operationId: refreshToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
            example:
              payload:
                id_user: 123
                username: john_doe
                email: john@example.com
                role: user
      responses:
        '200':
          description: Token berhasil di-refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              example:
                code: 200
                status: success
                message: Token has been refreshed successfully
                data:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/check:
    get:
      tags:
        - Token Management
      summary: Validasi token
      description: Memeriksa apakah token masih aktif dan valid
      operationId: checkToken
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token masih aktif
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                code: 200
                status: success
                message: Your token is still active
                data: {}
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/delete:
    delete:
      tags:
        - Token Management
      summary: Hapus/invalidate token
      description: Menghapus atau menginvalidasi token yang diberikan
      operationId: deleteToken
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTokenRequest'
            example:
              keterangan: LOGOUT
      responses:
        '200':
          description: Token berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                code: 200
                status: success
                message: Your token has been deleted!
                data: {}
        '400':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Token tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                status: error
                message: Token not found.
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - confirm_password
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 20
          pattern: '^[a-zA-Z0-9._]+$'
          description: Username pengguna (4-20 karakter, alphanumeric, underscore, dan titik)
          example: john_doe
        password:
          type: string
          minLength: 8
          description: Password dengan kombinasi huruf kecil, besar, angka, dan simbol (minimal 8 karakter). Diabaikan jika reset=YA
          example: Secure@Pass123
        confirm_password:
          type: string
          description: Konfirmasi password (harus sama dengan password)
          example: Secure@Pass123
        reset:
          type: string
          enum: [YA, TIDAK]
          default: TIDAK
          description: Flag untuk bypass password validation (untuk admin reset)
          example: TIDAK

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username pengguna
          example: john_doe
        password:
          type: string
          description: Password pengguna
          example: Secure@Pass123

    CreateTokenRequest:
      type: object
      required:
        - payload
      properties:
        payload:
          type: object
          description: Payload yang akan di-encode ke dalam JWT token
          additionalProperties: true
          example:
            id_user: 123
            username: john_doe
            email: john@example.com
            role: user

    DeleteTokenRequest:
      type: object
      properties:
        keterangan:
          type: string
          default: LOGOUT
          description: Keterangan alasan penghapusan token
          example: LOGOUT

    RegisterResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Data added successfully.
        data:
          type: object
          properties:
            id_user:
              type: integer
              description: ID pengguna yang baru dibuat
              example: 123

    LoginResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: ''
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT token untuk autentikasi request berikutnya
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyVGltZSI6IjEyMzQ1IiwiYXBwIjoiUFBCSSIsImlkX3VzZXIiOjEyMywidXNlcm5hbWUiOiJqb2huX2RvZSIsIm5hbWEiOiJKb2huIERvZSIsImVtYWlsIjoiam9obkBleGFtcGxlLmNvbSIsImxvZ2luX2FzIjoiVElEQUsiLCJpZF9hZG1pbiI6bnVsbCwiaWF0IjoxNjk4MDUxMzk5LCJleHAiOjE2OTgzNzMzOTl9.xyz

    TokenResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Token has been refreshed successfully
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT token baru
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    SuccessResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          enum: [success]
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          enum: [error]
        message:
          oneOf:
            - type: string
            - type: object

    ValidationError:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          enum: [error]
        message:
          type: object
          description: Object berisi field dan error message untuk setiap field
          additionalProperties:
            type: string
          example:
            username: username harus 4-20 karakter.
            password: password harus minimal 8 karakter dengan kombinasi huruf kecil, huruf besar, angka, dan simbol.
            confirm_password: password dan konfirmasi password tidak cocok.

    JWTPayload:
      type: object
      description: Struktur data yang di-encode dalam JWT token
      properties:
        userTime:
          type: string
          description: Unique user session identifier
          example: '1698051399'
        app:
          type: string
          description: Nama aplikasi
          example: PPBI
        id_user:
          type: integer
          description: ID pengguna
          example: 123
        username:
          type: string
          description: Username pengguna
          example: john_doe
        nama:
          type: string
          description: Nama lengkap pengguna
          example: John Doe
        email:
          type: string
          format: email
          description: Email pengguna
          example: john@example.com
        nmr_tlpn:
          type: string
          nullable: true
          description: Nomor telepon pengguna
          example: '081234567890'
        ids_level:
          type: integer
          nullable: true
          description: ID level/role pengguna
          example: 1
        level:
          type: string
          nullable: true
          description: Nama level/role pengguna
          example: Admin
        ids_grup:
          type: integer
          nullable: true
          description: ID grup pengguna
          example: 1
        grup:
          type: string
          nullable: true
          description: Nama grup pengguna
          example: Administrator
        login_as:
          type: string
          enum: [YA, TIDAK]
          description: Flag login dengan akun lain
          example: TIDAK
        id_admin:
          type: integer
          nullable: true
          description: ID admin jika login_as=YA
          example: null
        iat:
          type: integer
          description: Issued at time (Unix timestamp)
          example: 1698051399
        exp:
          type: integer
          description: Expiration time (Unix timestamp)
          example: 1698373399

  responses:
    BadRequest:
      description: Request tidak valid atau validasi gagal
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 400
            status: error
            message: Request body tidak valid

    Unauthorized:
      description: Token tidak valid atau tidak diberikan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 400
            status: error
            message: You are not logged in.

    NotFound:
      description: Resource tidak ditemukan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 404
            status: error
            message: Resource not found

    InternalServerError:
      description: Terjadi kesalahan pada server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 500
            status: error
            message: An error occurred in the system, please try again.

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token didapatkan dari endpoint login atau Google OAuth callback. Gunakan token dalam header Authorization dengan format "Bearer {token}"

security:
  - BearerAuth: []
