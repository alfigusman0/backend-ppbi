openapi: 3.0.3
info:
  title: API PPBI - Complete Service (Auth, Users, Profile, Cabang)
  version: 1.4.0
  description: |
    Dokumentasi lengkap Complete API Service untuk PPBI (Persatuan Penggemar Bonsai Indonesia).
    Sistem mencakup autentikasi, manajemen users, profil user, dan manajemen branch/cabang di berbagai lokasi geografis.
  contact:
    name: API Support
    email: support@ppbi.local
  x-changelog:
    - version: 1.4.0
      date: 2025-10-29
      changes:
        - Added complete Cabang (Branch) Management CRUD endpoints
        - Added cabang read with advanced filtering, geographic support, sorting, and pagination
        - Added cabang single retrieval with multiple filter options
        - Added cabang status management (YA/TIDAK untuk active/inactive)
        - Redis caching for cabang operations
        - Non-destructive merge with profile.js (1.3.0)
        - Access control based on user level and module permissions (module ID 4)
        - Geographic hierarchy support (provinsi, kabkota, kecamatan, kelurahan)
    - version: 1.3.0
      date: 2025-10-29
      changes:
        - Added complete Profile Management CRUD endpoints
        - Added profile geographic data support
    - version: 1.2.0
      date: 2025-10-29
      changes:
        - Added complete Users CRUD endpoints
        - Added Excel import functionality
    - version: 1.1.0
      date: 2025-10-29
      changes:
        - Added Google OAuth authentication
        - Added token management endpoints

servers:
  - url: http://localhost:5000/api
    description: Development Server
    variables:
      port:
        default: '5000'
  - url: https://api.ppbi.id/api
    description: Production Server

tags:
  - name: Authentication
    description: Endpoints untuk autentikasi pengguna
  - name: Token Management
    description: Endpoints untuk manajemen token JWT
  - name: OAuth
    description: Endpoints untuk autentikasi OAuth (Google)
  - name: Users
    description: Endpoints untuk manajemen data pengguna (CRUD)
  - name: Users Import
    description: Endpoints untuk import bulk users dari Excel
  - name: Profile
    description: Endpoints untuk manajemen profil user yang detail
  - name: Cabang (Branch)
    description: Endpoints untuk manajemen cabang/branch di berbagai lokasi

paths:
  /auth/google:
    get:
      tags:
        - OAuth
      summary: Redirect ke Google OAuth
      description: Mengarahkan user ke halaman login Google
      operationId: googleLogin
      responses:
        '302':
          description: Redirect ke Google OAuth authorization page
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/google/callback:
    get:
      tags:
        - OAuth
      summary: Google OAuth Callback
      operationId: googleCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        '302':
          description: Redirect ke frontend dengan JWT token
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register pengguna baru
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User berhasil didaftarkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Validasi input gagal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login pengguna
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validasi atau autentikasi gagal
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout pengguna
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/create:
    post:
      tags:
        - Token Management
      summary: Buat token baru
      operationId: createToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
      responses:
        '200':
          description: Token berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/refresh:
    post:
      tags:
        - Token Management
      summary: Refresh token
      operationId: refreshToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
      responses:
        '200':
          description: Token berhasil di-refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/check:
    get:
      tags:
        - Token Management
      summary: Validasi token
      operationId: checkToken
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token masih aktif
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/token/delete:
    delete:
      tags:
        - Token Management
      summary: Hapus/invalidate token
      operationId: deleteToken
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTokenRequest'
      responses:
        '200':
          description: Token berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Token tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - Users
      summary: Daftar pengguna dengan filter dan pagination
      operationId: listUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: order_by
          in: query
          schema:
            type: string
            default: created_at DESC
        - name: id_user
          in: query
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
        - name: ids_level
          in: query
          schema:
            type: string
        - name: ids_grup
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Daftar pengguna berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Users
      summary: Buat pengguna baru
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Validasi gagal
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    put:
      tags:
        - Users
      summary: Update pengguna
      operationId: updateUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validasi gagal
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Users
      summary: Hapus pengguna
      operationId: deleteUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/single:
    get:
      tags:
        - Users
      summary: Ambil data pengguna single
      operationId: getSingleUser
      security:
        - BearerAuth: []
      parameters:
        - name: id_user
          in: query
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Data pengguna berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/import/preview:
    post:
      tags:
        - Users Import
      summary: Preview Excel sebelum import
      operationId: previewExcelImport
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Preview file berhasil dibaca
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewExcelResponse'
        '400':
          description: Validasi file gagal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/import/excel:
    post:
      tags:
        - Users Import
      summary: Import users dari Excel
      operationId: importExcelUsers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Import berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportExcelResponse'
        '400':
          description: Validasi atau error import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/import/download-template:
    get:
      tags:
        - Users Import
      summary: Download template Excel
      operationId: downloadExcelTemplate
      responses:
        '200':
          description: Template file berhasil didownload
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profile:
    get:
      tags:
        - Profile
      summary: Daftar profil dengan filter dan pagination
      operationId: listProfiles
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: order_by
          in: query
          schema:
            type: string
            default: created_at DESC
        - name: id_profile
          in: query
          schema:
            type: string
        - name: username
          in: query
          schema:
            type: string
        - name: nama_lengkap
          in: query
          schema:
            type: string
        - name: jenis_kelamin
          in: query
          schema:
            type: string
            enum: [LAKI-LAKI, PEREMPUAN]
        - name: provinsi
          in: query
          schema:
            type: string
        - name: kabkota
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Daftar profil berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Profile
      summary: Buat profil baru
      operationId: createProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
      responses:
        '200':
          description: Profil berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileResponse'
        '400':
          description: Validasi gagal
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profile/{id}:
    put:
      tags:
        - Profile
      summary: Update profil
      operationId: updateProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profil berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validasi gagal
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Profil tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Profile
      summary: Hapus profil
      operationId: deleteProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Profil berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Profil tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /profile/single:
    get:
      tags:
        - Profile
      summary: Ambil data profil single
      operationId: getSingleProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id_profile
          in: query
          schema:
            type: integer
        - name: username
          in: query
          schema:
            type: string
        - name: nama_lengkap
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Data profil berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /settings/cabang:
    get:
      tags:
        - Cabang (Branch)
      summary: Daftar cabang dengan filter dan pagination
      description: Mengambil daftar cabang dengan dukungan filter geographic, status, sorting, pagination, dan Redis cache
      operationId: listCabang
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Nomor halaman (default 1)
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Jumlah data per halaman (default 10)
        - name: order_by
          in: query
          schema:
            type: string
            default: created_at DESC
          description: Urutan sorting (field ASC/DESC)
        - name: ids_cabang
          in: query
          schema:
            type: string
          description: Filter by cabang ID (IN query, comma-separated)
        - name: cabang
          in: query
          schema:
            type: string
          description: Filter by cabang name (LIKE query)
        - name: ids_provinsi
          in: query
          schema:
            type: integer
          description: Filter by provinsi ID
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by provinsi name (LIKE query)
        - name: pulau
          in: query
          schema:
            type: string
          description: Filter by pulau name (LIKE query)
        - name: ids_kabkota
          in: query
          schema:
            type: integer
          description: Filter by kabupaten/kota ID
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by kabupaten/kota name (LIKE query)
        - name: alamat
          in: query
          schema:
            type: string
          description: Filter by alamat (LIKE query)
        - name: status
          in: query
          schema:
            type: string
            enum: [YA, TIDAK]
          description: Filter by status (YA=aktif, TIDAK=tidak aktif)
      responses:
        '200':
          description: Daftar cabang berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CabangListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Cabang (Branch)
      summary: Buat cabang baru
      description: Membuat cabang baru dengan validasi lengkap terhadap lokasi dan status
      operationId: createCabang
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCabangRequest'
      responses:
        '200':
          description: Cabang berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCabangResponse'
        '400':
          description: Validasi gagal
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /settings/cabang/{id}:
    put:
      tags:
        - Cabang (Branch)
      summary: Update cabang
      description: Mengubah data cabang yang ada (semua field opsional saat update)
      operationId: updateCabang
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID cabang yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCabangRequest'
      responses:
        '200':
          description: Cabang berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validasi gagal atau tidak ada perubahan
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cabang tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Cabang (Branch)
      summary: Hapus cabang
      description: Menghapus cabang dari sistem
      operationId: deleteCabang
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID cabang yang akan dihapus
      responses:
        '200':
          description: Cabang berhasil dihapus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cabang tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /settings/cabang/single:
    get:
      tags:
        - Cabang (Branch)
      summary: Ambil data cabang single
      description: Mengambil data satu cabang dengan filter spesifik dan Redis cache
      operationId: getSingleCabang
      security:
        - BearerAuth: []
      parameters:
        - name: ids_cabang
          in: query
          schema:
            type: integer
          description: Filter by cabang ID
        - name: cabang
          in: query
          schema:
            type: string
          description: Filter by cabang name (LIKE query)
        - name: ids_provinsi
          in: query
          schema:
            type: integer
          description: Filter by provinsi ID
        - name: provinsi
          in: query
          schema:
            type: string
          description: Filter by provinsi name (LIKE query)
        - name: ids_kabkota
          in: query
          schema:
            type: integer
          description: Filter by kabupaten/kota ID
        - name: kabkota
          in: query
          schema:
            type: string
          description: Filter by kabupaten/kota name (LIKE query)
        - name: alamat
          in: query
          schema:
            type: string
          description: Filter by alamat (LIKE query)
        - name: status
          in: query
          schema:
            type: string
            enum: [YA, TIDAK]
          description: Filter by status
      responses:
        '200':
          description: Data cabang berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCabangResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - confirm_password
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 20
          pattern: '^[a-zA-Z0-9._]+$'
          example: john_doe
        password:
          type: string
          minLength: 8
          example: Secure@Pass123
        confirm_password:
          type: string
          example: Secure@Pass123
        reset:
          type: string
          enum: [YA, TIDAK]
          default: TIDAK

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: john_doe
        password:
          type: string
          example: Secure@Pass123

    CreateTokenRequest:
      type: object
      required:
        - payload
      properties:
        payload:
          type: object
          additionalProperties: true

    DeleteTokenRequest:
      type: object
      properties:
        keterangan:
          type: string
          default: LOGOUT

    CreateUserRequest:
      type: object
      required:
        - ids_grup
        - username
        - password
        - confirm_password
      properties:
        ids_grup:
          type: integer
          example: 1
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9._]+$'
          example: newuser
        password:
          type: string
          minLength: 8
          example: SecurePass@123
        confirm_password:
          type: string
          example: SecurePass@123
        reset:
          type: string
          enum: [YA, TIDAK]
          default: TIDAK

    UpdateUserRequest:
      type: object
      properties:
        ids_grup:
          type: integer
          example: 2
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: updated_username
        password:
          type: string
          minLength: 8
          example: NewSecurePass@456
        confirm_password:
          type: string
          example: NewSecurePass@456

    CreateProfileRequest:
      type: object
      required:
        - nama_lengkap
        - jenis_kelamin
      properties:
        nama_lengkap:
          type: string
          minLength: 3
          maxLength: 255
          example: John Doe
        jenis_kelamin:
          type: string
          enum: [LAKI-LAKI, PEREMPUAN]
          example: LAKI-LAKI
        ids_kelurahan:
          type: integer
          nullable: true
        rw:
          type: string
          maxLength: 5
          nullable: true
        rt:
          type: string
          maxLength: 5
          nullable: true
        alamat:
          type: string
          nullable: true
        nmr_tlpn:
          type: string
          minLength: 10
          maxLength: 20
          nullable: true
        foto:
          type: string
          nullable: true

    UpdateProfileRequest:
      type: object
      properties:
        nama_lengkap:
          type: string
          minLength: 3
          maxLength: 255
        jenis_kelamin:
          type: string
          enum: [LAKI-LAKI, PEREMPUAN]
        ids_kelurahan:
          type: integer
          nullable: true
        rw:
          type: string
          maxLength: 5
          nullable: true
        rt:
          type: string
          maxLength: 5
          nullable: true
        alamat:
          type: string
          nullable: true
        nmr_tlpn:
          type: string
          minLength: 10
          maxLength: 20
          nullable: true
        foto:
          type: string
          nullable: true

    CreateCabangRequest:
      type: object
      required:
        - cabang
        - ids_kabkota
        - alamat
        - status
      properties:
        cabang:
          type: string
          description: Nama cabang (wajib, unique dalam sistem)
          example: Cabang Jakarta Pusat
        ids_kabkota:
          type: integer
          description: ID kabupaten/kota dari tabel wilayah (wajib)
          example: 101
        alamat:
          type: string
          description: Alamat lengkap cabang (wajib)
          example: Jl. Merdeka No. 1, Jakarta Pusat
        status:
          type: string
          enum: [YA, TIDAK]
          description: Status aktif/tidak aktif cabang (YA=aktif, TIDAK=tidak aktif) (wajib)
          example: YA

    UpdateCabangRequest:
      type: object
      properties:
        cabang:
          type: string
          description: Nama cabang (opsional)
          example: Cabang Jakarta Pusat Updated
        ids_kabkota:
          type: integer
          description: ID kabupaten/kota (opsional, harus integer valid)
          example: 102
        alamat:
          type: string
          description: Alamat lengkap cabang (opsional)
          example: Jl. Sudirman No. 5, Jakarta Pusat
        status:
          type: string
          enum: [YA, TIDAK]
          description: Status aktif/tidak aktif (opsional)
          example: YA

    CabangData:
      type: object
      properties:
        ids_cabang:
          type: integer
          description: ID cabang
          example: 1
        cabang:
          type: string
          description: Nama cabang
          example: Cabang Jakarta Pusat
        ids_provinsi:
          type: integer
          nullable: true
          description: ID provinsi
          example: 1
        kode_provinsi:
          type: string
          nullable: true
          description: Kode provinsi
          example: '11'
        provinsi:
          type: string
          nullable: true
          description: Nama provinsi
          example: DKI Jakarta
        pulau:
          type: string
          nullable: true
          description: Nama pulau
          example: Jawa
        ids_kabkota:
          type: integer
          description: ID kabupaten/kota
          example: 101
        kode_kabkota:
          type: string
          nullable: true
          description: Kode kabupaten/kota
          example: '1101'
        kabkota:
          type: string
          nullable: true
          description: Nama kabupaten/kota
          example: Jakarta Pusat
        alamat:
          type: string
          description: Alamat cabang
          example: Jl. Merdeka No. 1, Jakarta Pusat
        status:
          type: string
          enum: [YA, TIDAK]
          description: Status cabang
          example: YA
        created_by:
          type: integer
          description: User ID yang membuat cabang
          example: 1
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan
          example: '2025-10-29T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: Waktu update terakhir
          example: null
        updated_by:
          type: integer
          nullable: true
          description: User ID yang terakhir update
          example: null

    ProfileData:
      type: object
      properties:
        id_profile:
          type: integer
          example: 1
        username:
          type: string
          example: john_doe
        nama_lengkap:
          type: string
          example: John Doe
        jenis_kelamin:
          type: string
          enum: [LAKI-LAKI, PEREMPUAN]
          example: LAKI-LAKI
        ids_level:
          type: integer
          nullable: true
          example: 1
        level:
          type: string
          nullable: true
          example: Admin
        ids_grup:
          type: integer
          nullable: true
          example: 1
        grup:
          type: string
          nullable: true
          example: Administrator
        provinsi:
          type: string
          nullable: true
          example: DKI Jakarta
        kabkota:
          type: string
          nullable: true
          example: Jakarta Pusat
        kelurahan:
          type: string
          nullable: true
          example: Cikini
        alamat:
          type: string
          nullable: true
          example: Jl. Merdeka No. 1
        nmr_tlpn:
          type: string
          nullable: true
          example: '081234567890'
        foto:
          type: string
          nullable: true
          example: https://example.com/photo.jpg
        created_at:
          type: string
          format: date-time
          example: '2025-10-29T00:00:00Z'

    UserData:
      type: object
      properties:
        id_user:
          type: integer
          example: 1
        username:
          type: string
          example: john_doe
        nama:
          type: string
          example: John Doe
        ids_level:
          type: integer
          example: 1
        level:
          type: string
          example: Admin
        ids_grup:
          type: integer
          example: 1
        grup:
          type: string
          example: Administrator
        created_at:
          type: string
          format: date-time
          example: '2025-10-29T00:00:00Z'

    RegisterResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Data added successfully.
        data:
          type: object
          properties:
            id_user:
              type: integer
              example: 123

    LoginResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    TokenResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    CreateUserResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Data added successfully.
        data:
          type: object
          properties:
            id_user:
              type: integer
              example: 123

    CreateProfileResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Data added successfully.
        data:
          type: object
          properties:
            id_profile:
              type: integer
              example: 123

    CreateCabangResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Data added successfully.
        data:
          type: object
          properties:
            ids_cabang:
              type: integer
              example: 123

    UserListResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserData'
            pagination:
              $ref: '#/components/schemas/Pagination'

    SingleUserResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          $ref: '#/components/schemas/UserData'

    ProfileListResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ProfileData'
            pagination:
              $ref: '#/components/schemas/Pagination'

    SingleProfileResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          $ref: '#/components/schemas/ProfileData'

    CabangListResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/CabangData'
            pagination:
              $ref: '#/components/schemas/Pagination'

    SingleCabangResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          $ref: '#/components/schemas/CabangData'

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 10
        total:
          type: integer
          example: 50
        last_page:
          type: integer
          example: 5

    PreviewExcelResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object

    ImportExcelResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object

    SuccessResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          enum: [success]
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          enum: [error]
        message:
          oneOf:
            - type: string
            - type: object

    ValidationError:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          enum: [error]
        message:
          type: object
          additionalProperties:
            type: string
          example:
            cabang: cabang tidak boleh kosong.
            ids_kabkota: ids kabupaten/kota tidak boleh kosong.
            alamat: alamat tidak boleh kosong.
            status: status tidak valid. harus YA atau TIDAK.

  responses:
    BadRequest:
      description: Request tidak valid atau validasi gagal
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Token tidak valid atau tidak diberikan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource tidak ditemukan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Terjadi kesalahan pada server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token didapatkan dari endpoint login atau Google OAuth callback

security:
  - BearerAuth: []
